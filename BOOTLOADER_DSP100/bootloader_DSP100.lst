CCS PCH C Compiler, Version 4.130, 13671               25-Jul-14 15:03

               Filename: C:\SOURCE\PIC\BOOTLOADER_DSP100\bootloader_DSP100.lst

               ROM used: 912 bytes (1%)
                         Largest free fragment is 63484
               RAM used: 5 (0%) at main() level
                         81 (2%) worst case
               Stack:    4 worst case (3 in main + 1 for interrupts)

*
00000:  GOTO   033C
.................... #include <18LF46K22.h> 
.................... //////// Standard Header file for the PIC18LF46K22 device //////////////// 
.................... #device PIC18LF46K22 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSM                   	//High speed Osc, medium power 4MHz-16MHz 
.................... #FUSES NOPLLEN               	//4X HW PLL disabled, 4X PLL enabled in software 
.................... #FUSES PUT                   	//Power Up Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES WDT_SW                	//No Watch Dog Timer, enabled in Software 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=14745600) 
....................  
.................... #include "types.h" 
.................... /*** FILEHEADER **************************************************************** 
....................  * 
....................  *	FILENAME:    types.h 
....................  *	DATE:        21.11.2004 
....................  *	AUTHOR:		 Christian Stadler 
....................  * 
....................  *	DESCRIPTION: Definition of common types. 
....................  * 
....................  ******************************************************************************/ 
....................  
.................... /*** HISTORY OF CHANGE ********************************************************* 
....................  * 
....................  *	$Log: /pic/_inc/types.h $ 
....................  *  
....................  * 3     1.11.10 11:42 Stadler 
....................  * - type definitons dependend on compiler 
....................  *  
....................  * 2     26.02.05 18:44 Stadler 
....................  * added bool type 
....................  *  
....................  ******************************************************************************/ 
....................  
.................... #ifndef _TYPES_H 
.................... #define _TYPES_H 
....................  
.................... /*---------------------------------------------------------------------------*/ 
.................... /* Type definitions for Microchip C18 Compiler                               */ 
.................... /*---------------------------------------------------------------------------*/ 
.................... #if defined(__18CXX) 
....................  
.................... typedef unsigned char bool; 
.................... typedef signed char sint8; 
.................... typedef signed int sint16; 
.................... typedef signed long sint32; 
.................... typedef unsigned char  uint8; 
.................... typedef unsigned int uint16; 
.................... typedef unsigned long uint32; 
....................  
.................... #endif /* #if defined(__18CXX) */ 
....................  
....................  
....................  
.................... /*---------------------------------------------------------------------------*/ 
.................... /* Type definitions for CCS C Compiler                                       */ 
.................... /*---------------------------------------------------------------------------*/ 
.................... #if (defined(__PCB__) || defined(__PCH__) || defined(__PCM__)) 
....................  
.................... typedef int1 bool; 
.................... typedef signed int8 sint8; 
.................... typedef signed int16 sint16; 
.................... typedef signed int32 sint32; 
.................... typedef unsigned int8  uint8; 
.................... typedef unsigned int16 uint16; 
.................... typedef unsigned int32 uint32; 
....................  
.................... #endif /* (defined(__PCB__) || defined(__PCH__) || defined(__PCM__)) */ 
....................  
.................... #endif /*_TYPES_H */ 
....................  
....................  
....................  
.................... /* enable the following line to support lower case charachters in HEX file */ 
.................... //#define BOOTLOADER_HEX_LOWERCASE 
....................  
.................... /* the following line enables the checksum check, disable to decrease the */ 
.................... /* bootloader size */ 
.................... #define BOOTLOADER_HEX_CHECKSUM 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* Intel HEX file record types                                               */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #define HEX_DATA_REC        0   /* data record */ 
.................... #define HEX_EOF_REC         1   /* end of file record */ 
.................... #define HEX_EXTADDR_REC     4   /* extened linear address record */ 
....................  
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* Intel HEX file section start offsets                                      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #define HEX_LEN_START       1   /* start of record length */ 
.................... #define HEX_ADDR_START      3   /* start of address */ 
.................... #define HEX_TYPE_START      7   /* start of record type */ 
.................... #define HEX_DATA_START      9   /* start of data */ 
....................  
.................... #define HEX_HEADER_LEN      4   /* lenght of lenght-, address- and type field in byte */ 
....................  
.................... #define HEX_LINE_LEN_MAX    50  /* maximum length a line in the HEX file */ 
....................  
....................  
.................... #define ACK                 0x06    /* positive acknowledge (ACK) */ 
.................... #define NAK                 0x15    /* negative acknowledge (NAK) */ 
....................  
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* Bootloader Address Mapping                                                */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #define BOOTLOADER_START        0x2A  
.................... #define BOOTLOADER_END          0x3FF + 0x400  
.................... #define RESET_VECTOR            0x400 + 0x400   
.................... #define INTERRUPT_VECTOR_LOW    0x418 + 0x400   
.................... #define INTERRUPT_VECTOR_HIGH   0x408 + 0x400   
.................... #define APPLICATION_START       RESET_VECTOR  
....................  
.................... #ORG BOOTLOADER_START, BOOTLOADER_END auto=0 default  
....................  
.................... #define PIN_USB_BOOT_TX			PIN_C5 
.................... #define PIN_USB_BOOT_RX			PIN_C4	 
.................... #define PIN_PHANTOM_ENABLE		PIN_D5 
....................  
....................  
.................... /* USB configuration */ 
.................... #use rs232(baud=57600,parity=N,xmit=PIN_USB_BOOT_TX,rcv=PIN_USB_BOOT_RX,bits=8,errors,stream=USB_BOOT,FORCE_SW) 
*
00036:  BCF    F94.5
00038:  BCF    F8B.5
0003A:  MOVLW  08
0003C:  MOVWF  01
0003E:  BRA    0040
00040:  NOP   
00042:  BSF    01.7
00044:  BRA    0062
00046:  BCF    01.7
00048:  RRCF   46,F
0004A:  BTFSC  FD8.0
0004C:  BSF    F8B.5
0004E:  BTFSS  FD8.0
00050:  BCF    F8B.5
00052:  BSF    01.6
00054:  BRA    0062
00056:  BCF    01.6
00058:  DECFSZ 01,F
0005A:  BRA    0048
0005C:  BRA    005E
0005E:  NOP   
00060:  BSF    F8B.5
00062:  MOVLW  0F
00064:  MOVWF  FE9
00066:  DECFSZ FE9,F
00068:  BRA    0066
0006A:  NOP   
0006C:  BTFSC  01.7
0006E:  BRA    0046
00070:  BTFSC  01.6
00072:  BRA    0056
00074:  RETURN 0
*
00096:  BSF    F94.4
00098:  BTFSC  F82.4
0009A:  BRA    0098
0009C:  MOVLW  08
0009E:  MOVWF  00
000A0:  CLRF   46
000A2:  BSF    00.7
000A4:  BRA    00C2
000A6:  BCF    00.7
000A8:  BRA    00C2
000AA:  BCF    FD8.0
000AC:  BTFSC  F82.4
000AE:  BSF    FD8.0
000B0:  RRCF   46,F
000B2:  BSF    00.6
000B4:  BRA    00C2
000B6:  BCF    00.6
000B8:  DECFSZ 00,F
000BA:  BRA    00AA
000BC:  MOVFF  46,01
000C0:  BRA    00D8
000C2:  MOVLW  0F
000C4:  BTFSC  00.7
000C6:  MOVLW  04
000C8:  MOVWF  01
000CA:  DECFSZ 01,F
000CC:  BRA    00CA
000CE:  BTFSC  00.7
000D0:  BRA    00A6
000D2:  BTFSC  00.6
000D4:  BRA    00B6
000D6:  BRA    00AA
000D8:  RETURN 0
....................  
....................  
.................... /* ========================================================================= */ 
.................... /* get_hexbyte                                                               */ 
.................... /* returns byte representation of 2 ASCII characters pointed to by *hex      */ 
.................... /* ========================================================================= */ 
.................... uint8 get_hexbyte(uint8 *hex) 
.................... { 
*
00138:  CLRF   4E
....................     uint8 i; 
....................     uint8 ret = 0; 
....................     uint8 ch; 
....................      
....................     for (i=0; i < 2; i++) 
0013A:  CLRF   4D
0013C:  MOVF   4D,W
0013E:  SUBLW  01
00140:  BNC   017A
....................     { 
....................         /* take care of HEX files where lower case letters are used */ 
....................         #ifdef BOOTLOADER_HEX_LOWERCASE 
....................         ch = toupper(*hex); 
....................         #else 
....................         ch = *hex; 
00142:  MOVFF  4B,FE9
00146:  MOVFF  4C,FEA
0014A:  MOVFF  FEF,4F
....................         #endif 
....................          
....................         /* convert character to integer value */ 
....................         if (ch >= 'A') 
0014E:  MOVF   4F,W
00150:  SUBLW  40
00152:  BC    015E
....................         { 
....................             ch = ch - 'A' + 10; 
00154:  MOVLW  41
00156:  SUBWF  4F,W
00158:  ADDLW  0A
0015A:  MOVWF  4F
....................         } 
....................         else 
0015C:  BRA    0162
....................         { 
....................             ch = ch - '0'; 
0015E:  MOVLW  30
00160:  SUBWF  4F,F
....................         } 
....................         ret = (ret << 4) | ch; 
00162:  SWAPF  4E,W
00164:  MOVWF  00
00166:  MOVLW  F0
00168:  ANDWF  00,F
0016A:  MOVF   00,W
0016C:  IORWF  4F,W
0016E:  MOVWF  4E
....................         hex++; 
00170:  INCF   4B,F
00172:  BTFSC  FD8.2
00174:  INCF   4C,F
....................     } 
00176:  INCF   4D,F
00178:  BRA    013C
....................      
....................     return (ret); 
0017A:  MOVFF  4E,01
.................... } 
0017E:  RETURN 0
....................  
....................  
.................... /* ========================================================================= */ 
.................... /* check_checksum                                                            */ 
.................... /* calculates checksum for the received Intel HEX file line                  */ 
.................... /* return: 0 = checksum ok                                                   */ 
.................... /*         1 = checksum error                                                */ 
.................... /* ========================================================================= */ 
.................... #ifdef BOOTLOADER_HEX_CHECKSUM 
.................... uint8 check_checksum(uint8 *hex, uint8 reclen) 
.................... { 
00180:  CLRF   49
....................     uint8 checksum = 0; 
....................     uint8 i; 
....................  
....................     // add all byte values, incl. checksum! 
....................     for (i=0; i <= (reclen + HEX_HEADER_LEN); i++) 
00182:  CLRF   4A
00184:  MOVLW  04
00186:  ADDWF  48,W
00188:  SUBWF  4A,W
0018A:  BZ    018E
0018C:  BC    01A8
....................     { 
....................         checksum += get_hexbyte(hex); 
0018E:  MOVFF  47,4C
00192:  MOVFF  46,4B
00196:  RCALL  0138
00198:  MOVF   01,W
0019A:  ADDWF  49,F
....................         hex += 2; 
0019C:  MOVLW  02
0019E:  ADDWF  46,F
001A0:  MOVLW  00
001A2:  ADDWFC 47,F
....................     } 
001A4:  INCF   4A,F
001A6:  BRA    0184
....................  
....................     // checksum is zero if checksum is correct 
....................     return (checksum); 
001A8:  MOVFF  49,01
.................... } 
001AC:  RETURN 0
.................... #endif /* BOOTLOADER_HEX_CHECKSUM */ 
....................  
....................  
.................... /* ========================================================================= */ 
.................... /* bootloader                                                                */ 
.................... /* the bootloader itself.                                                    */ 
.................... /* ========================================================================= */ 
.................... void bootloader(void) 
.................... { 
*
00210:  CLRF   0C
00212:  BCF    43.0
00214:  CLRF   45
00216:  CLRF   44
....................     uint32 addr; 
....................     uint16 addr_low; 
....................     uint8 addr_high = 0; 
....................     uint8 reclen; 
....................     uint8 rectype; 
....................     uint8 idx; 
....................     uint8 buffer[HEX_LINE_LEN_MAX]; 
....................     uint8 ch; 
....................     bool hexend = 0; 
....................      
....................     #if getenv("FLASH_ERASE_SIZE")>2 
....................     uint16 next_addr = 0; 
....................     #endif 
....................  
....................      
....................     /* until end of HEX file */ 
....................     while(hexend == 0) 
....................     { 
00218:  BTFSC  43.0
0021A:  BRA    033A
....................         /* get one line of the HEX file via RS232 until we receive CR or */ 
....................         /* we reached the end of the buffer */ 
....................         idx = 0; 
0021C:  CLRF   0F
....................         do 
....................         { 
....................              /* get one byte */ 
....................              ch = fgetc(USB_BOOT); 
0021E:  RCALL  0096
00220:  MOVFF  01,42
....................              /* save to buffer */ 
....................              buffer[idx] = ch; 
00224:  CLRF   03
00226:  MOVF   0F,W
00228:  ADDLW  10
0022A:  MOVWF  FE9
0022C:  MOVLW  00
0022E:  ADDWFC 03,W
00230:  MOVWF  FEA
00232:  MOVFF  42,FEF
....................              /* increment buffer index */ 
....................              idx++; 
00236:  INCF   0F,F
....................         } 
....................         while(ch != 0x0A); 
00238:  MOVF   42,W
0023A:  SUBLW  0A
0023C:  BNZ   021E
....................  
....................  
....................         /* get record length */ 
....................         reclen = get_hexbyte(&buffer[HEX_LEN_START]); 
0023E:  CLRF   4C
00240:  MOVLW  11
00242:  MOVWF  4B
00244:  RCALL  0138
00246:  MOVFF  01,0D
....................  
....................         /* check for proper checksum */ 
....................         #ifdef BOOTLOADER_HEX_CHECKSUM 
....................         if (check_checksum(&buffer[HEX_LEN_START], reclen) != 0) 
0024A:  CLRF   47
0024C:  MOVLW  11
0024E:  MOVWF  46
00250:  MOVFF  0D,48
00254:  RCALL  0180
00256:  MOVF   01,F
00258:  BZ    0262
....................         { 
....................             /* checkum error - send negative acknowledge */ 
....................             fputc(NAK,USB_BOOT); 
0025A:  MOVLW  15
0025C:  MOVWF  46
0025E:  RCALL  0036
....................         } 
....................         else 
00260:  BRA    0338
....................         #endif /* BOOTLOADER_HEX_CHECKSUM */ 
....................         { 
....................             /* checkum ok */ 
....................  
....................             /* get address */ 
....................             addr_low = make16(get_hexbyte(&buffer[HEX_ADDR_START]), 
....................                               get_hexbyte(&buffer[HEX_ADDR_START+2])); 
00262:  CLRF   4C
00264:  MOVLW  13
00266:  MOVWF  4B
00268:  RCALL  0138
0026A:  MOVFF  01,46
0026E:  CLRF   4C
00270:  MOVLW  15
00272:  MOVWF  4B
00274:  RCALL  0138
00276:  MOVFF  46,0B
0027A:  MOVFF  01,0A
....................  
....................             /* make 32 bit address */ 
....................             addr = make32(addr_high, addr_low); 
0027E:  CLRF   09
00280:  MOVFF  0C,08
00284:  MOVFF  0A,06
00288:  MOVFF  0B,07
....................  
....................             /* get record type */ 
....................             rectype = get_hexbyte(&buffer[HEX_TYPE_START]); 
0028C:  CLRF   4C
0028E:  MOVLW  17
00290:  MOVWF  4B
00292:  RCALL  0138
00294:  MOVFF  01,0E
....................              
....................             if (rectype == HEX_DATA_REC) 
00298:  MOVF   0E,F
0029A:  BNZ   0318
....................             { 
....................                 /* only program code memory */ 
....................                 if ((addr_high < 0x30) && (addr >= RESET_VECTOR)) 
0029C:  MOVF   0C,W
0029E:  SUBLW  2F
002A0:  BNC   0316
002A2:  MOVF   09,F
002A4:  BNZ   02B0
002A6:  MOVF   08,F
002A8:  BNZ   02B0
002AA:  MOVF   07,W
002AC:  SUBLW  07
002AE:  BC    0316
....................                 { 
....................                     for (idx=0; idx < reclen; idx++) 
002B0:  CLRF   0F
002B2:  MOVF   0D,W
002B4:  SUBWF  0F,W
002B6:  BC    02FE
....................                     { 
....................                         buffer[idx] = get_hexbyte(&buffer[HEX_DATA_START+(idx*2)]); 
002B8:  CLRF   03
002BA:  MOVF   0F,W
002BC:  ADDLW  10
002BE:  MOVWF  01
002C0:  MOVLW  00
002C2:  ADDWFC 03,F
002C4:  MOVFF  01,46
002C8:  MOVFF  03,47
002CC:  BCF    FD8.0
002CE:  RLCF   0F,W
002D0:  ADDLW  09
002D2:  CLRF   03
002D4:  ADDLW  10
002D6:  MOVWF  01
002D8:  MOVLW  00
002DA:  ADDWFC 03,F
002DC:  MOVFF  01,48
002E0:  MOVFF  03,49
002E4:  MOVFF  03,4C
002E8:  MOVFF  01,4B
002EC:  RCALL  0138
002EE:  MOVFF  47,FEA
002F2:  MOVFF  46,FE9
002F6:  MOVFF  01,FEF
....................                     } 
....................  
....................                     #if getenv("FLASH_ERASE_SIZE") > getenv("FLASH_WRITE_SIZE") 
002FA:  INCF   0F,F
002FC:  BRA    02B2
....................                     #if defined(__PCM__) 
....................                     if ((addr_low!=next_addr)&&(addr_low&(getenv("FLASH_ERASE_SIZE")-1)!=0)) 
....................                     #else 
....................                     if ((addr_low!=next_addr)&&(addr_low&(getenv("FLASH_ERASE_SIZE")/2-1)!=0)) 
....................                     #endif 
....................                         erase_program_eeprom(addr); 
....................                     next_addr = addr_low + 1; 
....................                     #endif 
....................                     write_program_memory(addr, buffer, reclen); 
002FE:  MOVFF  08,FF8
00302:  MOVFF  07,FF7
00306:  MOVFF  06,FF6
0030A:  CLRF   FEA
0030C:  MOVLW  10
0030E:  MOVWF  FE9
00310:  MOVFF  0D,46
00314:  RCALL  01CE
....................                 } 
....................             } 
....................             else if (rectype == HEX_EOF_REC) 
00316:  BRA    0332
00318:  DECFSZ 0E,W
0031A:  BRA    0320
....................             { 
....................                 hexend = 1; 
0031C:  BSF    43.0
....................             } 
....................             else if (rectype == HEX_EXTADDR_REC) 
0031E:  BRA    0332
00320:  MOVF   0E,W
00322:  SUBLW  04
00324:  BNZ   0332
....................             { 
.................... 				//fprintf(RS232_BOOT,"Got extended address record\r\n"); 
....................                 /* to save resources, only take lower byte - this */ 
....................                 /* allows 24 bit addresses => enough for PIC18F */ 
....................                 //addr_high = make16(get_hexbyte(&buffer[HEX_DATA_START]), 
....................                 //                   get_hexbyte(&buffer[HEX_DATA_START+2])); 
....................                 addr_high = get_hexbyte(&buffer[HEX_DATA_START+2]); 
00326:  CLRF   4C
00328:  MOVLW  1B
0032A:  MOVWF  4B
0032C:  RCALL  0138
0032E:  MOVFF  01,0C
....................             } 
....................              
....................             /* send positive acknowledge */ 
....................             fputc(ACK,USB_BOOT); 
00332:  MOVLW  06
00334:  MOVWF  46
00336:  RCALL  0036
....................         } 
....................     } 
00338:  BRA    0218
....................     
....................    //write_eeprom(0x05,0x00); 
....................     
.................... } 
0033A:  RETURN 0
....................  
....................  
.................... /* ========================================================================= */ 
.................... /* application                                                               */ 
.................... /* dummy application.                                                        */ 
.................... /* ========================================================================= */ 
.................... #ORG APPLICATION_START,APPLICATION_START+2 
.................... void application(void) 
.................... { 
....................    	//write_eeprom(0x05,0x01); 
....................    	while(1); 
*
00800:  BRA    0800
.................... } 
00802:  RETURN 0
....................  
....................  
.................... /* ========================================================================= */ 
.................... /* main                                                                      */ 
.................... /* checks if bootloader shall be invoked or if it shall start the            */ 
.................... /* application program.                                                      */ 
.................... /* ========================================================================= */ 
.................... #ORG BOOTLOADER_START 
....................  
.................... int timeout_error; 
....................  
.................... char timed_getc() { 
....................  
.................... 	int32 timeout; 
....................  
.................... 	timeout_error = FALSE; 
*
000DA:  CLRF   04
.................... 	timeout = 0; 
000DC:  CLRF   09
000DE:  CLRF   08
000E0:  CLRF   07
000E2:  CLRF   06
....................  
.................... 	while(!kbhit(USB_BOOT)&&(++timeout<300000)) { // half a second 
000E4:  BTFSS  F82.4
000E6:  BRA    011E
000E8:  MOVLW  01
000EA:  ADDWF  06,F
000EC:  BTFSC  FD8.0
000EE:  INCF   07,F
000F0:  BTFSC  FD8.2
000F2:  INCF   08,F
000F4:  BTFSC  FD8.2
000F6:  INCF   09,F
000F8:  MOVF   09,F
000FA:  BNZ   011E
000FC:  MOVF   08,W
000FE:  SUBLW  04
00100:  BNC   011E
00102:  BNZ   0112
00104:  MOVF   07,W
00106:  SUBLW  93
00108:  BNC   011E
0010A:  BNZ   0112
0010C:  MOVF   06,W
0010E:  SUBLW  DF
00110:  BNC   011E
.................... 		delay_us(5); // this polls at 10x the 9600 baud rate 
00112:  MOVLW  05
00114:  MOVWF  00
00116:  DECFSZ 00,F
00118:  BRA    0116
0011A:  BRA    011C
.................... 	} 
0011C:  BRA    00E4
....................  
.................... 	if(kbhit(USB_BOOT)) { 
0011E:  BTFSC  F82.4
00120:  BRA    012C
.................... 		timeout_error = FALSE; 
00122:  CLRF   04
.................... 		return(fgetc(USB_BOOT)); 
00124:  RCALL  0096
00126:  MOVF   01,W
00128:  BRA    0136
.................... 	} else { 
0012A:  BRA    0136
.................... 		timeout_error = TRUE; 
0012C:  MOVLW  01
0012E:  MOVWF  04
.................... 		return(0); 
00130:  MOVLW  00
00132:  MOVWF  01
00134:  BRA    0136
.................... 	} 
.................... } 
00136:  RETURN 0
....................  
.................... void main() 
.................... { 
*
0033C:  CLRF   FF8
0033E:  BCF    FD0.7
00340:  CLRF   FEA
00342:  CLRF   FE9
00344:  BCF    F94.5
00346:  BSF    F8B.5
00348:  MOVLB  1
0034A:  CLRF   x88
0034C:  MOVF   FC1,W
0034E:  ANDLW  F0
00350:  MOVWF  FC1
00352:  MOVLW  00
00354:  MOVLB  F
00356:  MOVWF  x38
00358:  MOVWF  x3C
0035A:  MOVWF  x39
0035C:  MOVWF  x3A
0035E:  MOVWF  x3B
00360:  CLRF   F77
00362:  CLRF   F78
00364:  CLRF   F79
....................     setup_adc(ADC_OFF); 
00366:  BCF    FC2.0
....................  
.................... 	delay_us(50); 
00368:  MOVLW  3D
0036A:  MOVWF  00
0036C:  DECFSZ 00,F
0036E:  BRA    036C
....................  
.................... 	output_low(PIN_PHANTOM_ENABLE); 
00370:  BCF    F95.5
00372:  BCF    F8C.5
....................  
.................... 	fprintf(USB_BOOT,"Startup!\r\n"); 
00374:  MOVLW  2A
00376:  MOVWF  FF6
00378:  MOVLW  00
0037A:  MOVWF  FF7
0037C:  MOVLB  0
0037E:  RCALL  0076
....................  
....................     char receive_char = timed_getc(); 
00380:  RCALL  00DA
00382:  MOVFF  01,05
....................  
....................  
.................... 	if(receive_char == 0x55) { 
00386:  MOVF   05,W
00388:  SUBLW  55
0038A:  BNZ   03A0
.................... 		fputc(0x06,USB_BOOT); 
0038C:  MOVLW  06
0038E:  MOVWF  46
00390:  RCALL  0036
.................... 		fputc(0x55,USB_BOOT); 
00392:  MOVLW  55
00394:  MOVWF  46
00396:  RCALL  0036
.................... 		fputc(0x03,USB_BOOT); 
00398:  MOVLW  03
0039A:  MOVWF  46
0039C:  RCALL  0036
....................         bootloader(); 
0039E:  RCALL  0210
....................     } 
....................  
....................     #asm 
....................     goto RESET_VECTOR 
003A0:  GOTO   0800
....................     #endasm 
.................... } 
....................  
....................  
.................... /* ========================================================================= */ 
.................... /* isr_low                                                                   */ 
.................... /* remap interrupt vector low.                                               */ 
.................... /* ========================================================================= */ 
.................... #ORG 0x08, 0x17 
.................... void isr_high(void) 
003A4:  BRA    03A4
.................... { 
....................     #asm 
....................     goto INTERRUPT_VECTOR_HIGH 
*
00008:  GOTO   0808
....................     #endasm 
.................... } 
0000C:  RETURN 0
....................  
....................  
.................... /* ========================================================================= */ 
.................... /* isr_high                                                                  */ 
.................... /* remap interrupt vector high.                                              */ 
.................... /* ========================================================================= */ 
.................... #ORG 0x18, 0x29 
.................... void isr_low(void) 
.................... { 
....................     #asm 
....................     goto INTERRUPT_VECTOR_LOW 
*
00018:  GOTO   0818
....................     #endasm 
.................... } 
0001C:  RETURN 0

Configuration Fuses:
   Word  1: 6300   HSM NOPLLEN PRIMARY_ON FCMEN NOIESO
   Word  2: 3419   NOPUT NOBROWNOUT BORV19 NOWDT WDT8192
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2D2 MCLR
   Word  4: 0000   NOSTVREN NOLVP NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
