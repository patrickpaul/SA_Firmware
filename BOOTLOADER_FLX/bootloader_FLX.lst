CCS PCH C Compiler, Version 4.130, 13671               16-Jul-14 17:03

               Filename: C:\SOURCE\PIC\BOOTLOADER_FLX\bootloader_FLX.lst

               ROM used: 1036 bytes (2%)
                         Largest free fragment is 63484
               RAM used: 6 (0%) at main() level
                         82 (2%) worst case
               Stack:    4 worst case (3 in main + 1 for interrupts)

*
00000:  GOTO   039E
.................... #include <18LF46K22.h> 
.................... //////// Standard Header file for the PIC18LF46K22 device //////////////// 
.................... #device PIC18LF46K22 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSM                   	//High speed Osc, medium power 4MHz-16MHz 
.................... #FUSES NOPLLEN               	//4X HW PLL disabled, 4X PLL enabled in software 
.................... #FUSES PUT                   	//Power Up Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES WDT_SW                	//No Watch Dog Timer, enabled in Software 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=14745600) 
....................  
.................... #include "types.h" 
.................... /*** FILEHEADER **************************************************************** 
....................  * 
....................  *	FILENAME:    types.h 
....................  *	DATE:        21.11.2004 
....................  *	AUTHOR:		 Christian Stadler 
....................  * 
....................  *	DESCRIPTION: Definition of common types. 
....................  * 
....................  ******************************************************************************/ 
....................  
.................... /*** HISTORY OF CHANGE ********************************************************* 
....................  * 
....................  *	$Log: /pic/_inc/types.h $ 
....................  *  
....................  * 3     1.11.10 11:42 Stadler 
....................  * - type definitons dependend on compiler 
....................  *  
....................  * 2     26.02.05 18:44 Stadler 
....................  * added bool type 
....................  *  
....................  ******************************************************************************/ 
....................  
.................... #ifndef _TYPES_H 
.................... #define _TYPES_H 
....................  
.................... /*---------------------------------------------------------------------------*/ 
.................... /* Type definitions for Microchip C18 Compiler                               */ 
.................... /*---------------------------------------------------------------------------*/ 
.................... #if defined(__18CXX) 
....................  
.................... typedef unsigned char bool; 
.................... typedef signed char sint8; 
.................... typedef signed int sint16; 
.................... typedef signed long sint32; 
.................... typedef unsigned char  uint8; 
.................... typedef unsigned int uint16; 
.................... typedef unsigned long uint32; 
....................  
.................... #endif /* #if defined(__18CXX) */ 
....................  
....................  
....................  
.................... /*---------------------------------------------------------------------------*/ 
.................... /* Type definitions for CCS C Compiler                                       */ 
.................... /*---------------------------------------------------------------------------*/ 
.................... #if (defined(__PCB__) || defined(__PCH__) || defined(__PCM__)) 
....................  
.................... typedef int1 bool; 
.................... typedef signed int8 sint8; 
.................... typedef signed int16 sint16; 
.................... typedef signed int32 sint32; 
.................... typedef unsigned int8  uint8; 
.................... typedef unsigned int16 uint16; 
.................... typedef unsigned int32 uint32; 
....................  
.................... #endif /* (defined(__PCB__) || defined(__PCH__) || defined(__PCM__)) */ 
....................  
.................... #endif /*_TYPES_H */ 
....................  
....................  
....................  
.................... /* enable the following line to support lower case charachters in HEX file */ 
.................... //#define BOOTLOADER_HEX_LOWERCASE 
....................  
.................... /* the following line enables the checksum check, disable to decrease the */ 
.................... /* bootloader size */ 
.................... #define BOOTLOADER_HEX_CHECKSUM 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* Intel HEX file record types                                               */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #define HEX_DATA_REC        0   /* data record */ 
.................... #define HEX_EOF_REC         1   /* end of file record */ 
.................... #define HEX_EXTADDR_REC     4   /* extened linear address record */ 
....................  
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* Intel HEX file section start offsets                                      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #define HEX_LEN_START       1   /* start of record length */ 
.................... #define HEX_ADDR_START      3   /* start of address */ 
.................... #define HEX_TYPE_START      7   /* start of record type */ 
.................... #define HEX_DATA_START      9   /* start of data */ 
....................  
.................... #define HEX_HEADER_LEN      4   /* lenght of lenght-, address- and type field in byte */ 
....................  
.................... #define HEX_LINE_LEN_MAX    50  /* maximum length a line in the HEX file */ 
....................  
....................  
.................... #define ACK                 0x06    /* positive acknowledge (ACK) */ 
.................... #define NAK                 0x15    /* negative acknowledge (NAK) */ 
....................  
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* Bootloader Address Mapping                                                */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #define BOOTLOADER_START        0x2A  
.................... #define BOOTLOADER_END          0x3FF + 0x400  
.................... #define RESET_VECTOR            0x400 + 0x400   
.................... #define INTERRUPT_VECTOR_LOW    0x418 + 0x400   
.................... #define INTERRUPT_VECTOR_HIGH   0x408 + 0x400   
.................... #define APPLICATION_START       RESET_VECTOR  
....................  
.................... #ORG BOOTLOADER_START, BOOTLOADER_END auto=0 default  
....................  
.................... #define PIN_RS232_BOOT_TX      PIN_D6 
.................... #define PIN_RS232_BOOT_RX      PIN_D7 
....................  
.................... #define PIN_USB_BOOT_TX			PIN_C5 
.................... #define PIN_USB_BOOT_RX			PIN_C4	 
.................... #define PIN_PHANTOM_ENABLE		PIN_D5 
....................  
....................  
.................... /* RS232 configuration */ 
.................... #use rs232(baud=57600,parity=N,xmit=PIN_USB_BOOT_TX,rcv=PIN_USB_BOOT_RX,bits=8,errors,stream=USB_BOOT,FORCE_SW) 
*
0004E:  BCF    F94.5
00050:  BCF    F8B.5
00052:  MOVLW  08
00054:  MOVWF  01
00056:  BRA    0058
00058:  NOP   
0005A:  BSF    01.7
0005C:  BRA    007A
0005E:  BCF    01.7
00060:  RRCF   47,F
00062:  BTFSC  FD8.0
00064:  BSF    F8B.5
00066:  BTFSS  FD8.0
00068:  BCF    F8B.5
0006A:  BSF    01.6
0006C:  BRA    007A
0006E:  BCF    01.6
00070:  DECFSZ 01,F
00072:  BRA    0060
00074:  BRA    0076
00076:  NOP   
00078:  BSF    F8B.5
0007A:  MOVLW  0F
0007C:  MOVWF  FE9
0007E:  DECFSZ FE9,F
00080:  BRA    007E
00082:  NOP   
00084:  BTFSC  01.7
00086:  BRA    005E
00088:  BTFSC  01.6
0008A:  BRA    006E
0008C:  RETURN 0
*
000AE:  BSF    F94.4
000B0:  BTFSC  F82.4
000B2:  BRA    00B0
000B4:  MOVLW  08
000B6:  MOVWF  00
000B8:  CLRF   47
000BA:  BSF    00.7
000BC:  BRA    00DA
000BE:  BCF    00.7
000C0:  BRA    00DA
000C2:  BCF    FD8.0
000C4:  BTFSC  F82.4
000C6:  BSF    FD8.0
000C8:  RRCF   47,F
000CA:  BSF    00.6
000CC:  BRA    00DA
000CE:  BCF    00.6
000D0:  DECFSZ 00,F
000D2:  BRA    00C2
000D4:  MOVFF  47,01
000D8:  BRA    00F0
000DA:  MOVLW  0F
000DC:  BTFSC  00.7
000DE:  MOVLW  04
000E0:  MOVWF  01
000E2:  DECFSZ 01,F
000E4:  BRA    00E2
000E6:  BTFSC  00.7
000E8:  BRA    00BE
000EA:  BTFSC  00.6
000EC:  BRA    00CE
000EE:  BRA    00C2
000F0:  RETURN 0
.................... #use rs232(baud=9600,parity=N,xmit=PIN_RS232_BOOT_TX,rcv=PIN_RS232_BOOT_RX,bits=8,errors, stream=RS232_BOOT) 
000F2:  BTFSS  FA4.5
000F4:  BRA    00F2
000F6:  MOVFF  F71,04
000FA:  MOVFF  F74,01
000FE:  BTFSS  04.1
00100:  BRA    0106
00102:  BCF    F71.4
00104:  BSF    F71.4
00106:  RETURN 0
....................  
....................  
.................... /* ========================================================================= */ 
.................... /* get_hexbyte                                                               */ 
.................... /* returns byte representation of 2 ASCII characters pointed to by *hex      */ 
.................... /* ========================================================================= */ 
.................... uint8 get_hexbyte(uint8 *hex) 
.................... { 
*
0019A:  CLRF   4F
....................     uint8 i; 
....................     uint8 ret = 0; 
....................     uint8 ch; 
....................      
....................     for (i=0; i < 2; i++) 
0019C:  CLRF   4E
0019E:  MOVF   4E,W
001A0:  SUBLW  01
001A2:  BNC   01DC
....................     { 
....................         /* take care of HEX files where lower case letters are used */ 
....................         #ifdef BOOTLOADER_HEX_LOWERCASE 
....................         ch = toupper(*hex); 
....................         #else 
....................         ch = *hex; 
001A4:  MOVFF  4C,FE9
001A8:  MOVFF  4D,FEA
001AC:  MOVFF  FEF,50
....................         #endif 
....................          
....................         /* convert character to integer value */ 
....................         if (ch >= 'A') 
001B0:  MOVF   50,W
001B2:  SUBLW  40
001B4:  BC    01C0
....................         { 
....................             ch = ch - 'A' + 10; 
001B6:  MOVLW  41
001B8:  SUBWF  50,W
001BA:  ADDLW  0A
001BC:  MOVWF  50
....................         } 
....................         else 
001BE:  BRA    01C4
....................         { 
....................             ch = ch - '0'; 
001C0:  MOVLW  30
001C2:  SUBWF  50,F
....................         } 
....................         ret = (ret << 4) | ch; 
001C4:  SWAPF  4F,W
001C6:  MOVWF  00
001C8:  MOVLW  F0
001CA:  ANDWF  00,F
001CC:  MOVF   00,W
001CE:  IORWF  50,W
001D0:  MOVWF  4F
....................         hex++; 
001D2:  INCF   4C,F
001D4:  BTFSC  FD8.2
001D6:  INCF   4D,F
....................     } 
001D8:  INCF   4E,F
001DA:  BRA    019E
....................      
....................     return (ret); 
001DC:  MOVFF  4F,01
.................... } 
001E0:  RETURN 0
....................  
....................  
.................... /* ========================================================================= */ 
.................... /* check_checksum                                                            */ 
.................... /* calculates checksum for the received Intel HEX file line                  */ 
.................... /* return: 0 = checksum ok                                                   */ 
.................... /*         1 = checksum error                                                */ 
.................... /* ========================================================================= */ 
.................... #ifdef BOOTLOADER_HEX_CHECKSUM 
.................... uint8 check_checksum(uint8 *hex, uint8 reclen) 
.................... { 
001E2:  CLRF   4A
....................     uint8 checksum = 0; 
....................     uint8 i; 
....................  
....................     // add all byte values, incl. checksum! 
....................     for (i=0; i <= (reclen + HEX_HEADER_LEN); i++) 
001E4:  CLRF   4B
001E6:  MOVLW  04
001E8:  ADDWF  49,W
001EA:  SUBWF  4B,W
001EC:  BZ    01F0
001EE:  BC    020A
....................     { 
....................         checksum += get_hexbyte(hex); 
001F0:  MOVFF  48,4D
001F4:  MOVFF  47,4C
001F8:  RCALL  019A
001FA:  MOVF   01,W
001FC:  ADDWF  4A,F
....................         hex += 2; 
001FE:  MOVLW  02
00200:  ADDWF  47,F
00202:  MOVLW  00
00204:  ADDWFC 48,F
....................     } 
00206:  INCF   4B,F
00208:  BRA    01E6
....................  
....................     // checksum is zero if checksum is correct 
....................     return (checksum); 
0020A:  MOVFF  4A,01
.................... } 
0020E:  RETURN 0
.................... #endif /* BOOTLOADER_HEX_CHECKSUM */ 
....................  
....................  
.................... /* ========================================================================= */ 
.................... /* bootloader                                                                */ 
.................... /* the bootloader itself.                                                    */ 
.................... /* ========================================================================= */ 
.................... void bootloader(void) 
.................... { 
*
00272:  CLRF   0D
00274:  BCF    44.0
00276:  CLRF   46
00278:  CLRF   45
....................     uint32 addr; 
....................     uint16 addr_low; 
....................     uint8 addr_high = 0; 
....................     uint8 reclen; 
....................     uint8 rectype; 
....................     uint8 idx; 
....................     uint8 buffer[HEX_LINE_LEN_MAX]; 
....................     uint8 ch; 
....................     bool hexend = 0; 
....................      
....................     #if getenv("FLASH_ERASE_SIZE")>2 
....................     uint16 next_addr = 0; 
....................     #endif 
....................  
....................      
....................     /* until end of HEX file */ 
....................     while(hexend == 0) 
....................     { 
0027A:  BTFSC  44.0
0027C:  BRA    039C
....................         /* get one line of the HEX file via RS232 until we receive CR or */ 
....................         /* we reached the end of the buffer */ 
....................         idx = 0; 
0027E:  CLRF   10
....................         do 
....................         { 
....................              /* get one byte */ 
....................              ch = fgetc(USB_BOOT); 
00280:  RCALL  00AE
00282:  MOVFF  01,43
....................              /* save to buffer */ 
....................              buffer[idx] = ch; 
00286:  CLRF   03
00288:  MOVF   10,W
0028A:  ADDLW  11
0028C:  MOVWF  FE9
0028E:  MOVLW  00
00290:  ADDWFC 03,W
00292:  MOVWF  FEA
00294:  MOVFF  43,FEF
....................              /* increment buffer index */ 
....................              idx++; 
00298:  INCF   10,F
....................         } 
....................         while(ch != 0x0A); 
0029A:  MOVF   43,W
0029C:  SUBLW  0A
0029E:  BNZ   0280
....................  
....................  
....................         /* get record length */ 
....................         reclen = get_hexbyte(&buffer[HEX_LEN_START]); 
002A0:  CLRF   4D
002A2:  MOVLW  12
002A4:  MOVWF  4C
002A6:  RCALL  019A
002A8:  MOVFF  01,0E
....................  
....................         /* check for proper checksum */ 
....................         #ifdef BOOTLOADER_HEX_CHECKSUM 
....................         if (check_checksum(&buffer[HEX_LEN_START], reclen) != 0) 
002AC:  CLRF   48
002AE:  MOVLW  12
002B0:  MOVWF  47
002B2:  MOVFF  0E,49
002B6:  RCALL  01E2
002B8:  MOVF   01,F
002BA:  BZ    02C4
....................         { 
....................             /* checkum error - send negative acknowledge */ 
....................             fputc(NAK,USB_BOOT); 
002BC:  MOVLW  15
002BE:  MOVWF  47
002C0:  RCALL  004E
....................         } 
....................         else 
002C2:  BRA    039A
....................         #endif /* BOOTLOADER_HEX_CHECKSUM */ 
....................         { 
....................             /* checkum ok */ 
....................  
....................             /* get address */ 
....................             addr_low = make16(get_hexbyte(&buffer[HEX_ADDR_START]), 
....................                               get_hexbyte(&buffer[HEX_ADDR_START+2])); 
002C4:  CLRF   4D
002C6:  MOVLW  14
002C8:  MOVWF  4C
002CA:  RCALL  019A
002CC:  MOVFF  01,47
002D0:  CLRF   4D
002D2:  MOVLW  16
002D4:  MOVWF  4C
002D6:  RCALL  019A
002D8:  MOVFF  47,0C
002DC:  MOVFF  01,0B
....................  
....................             /* make 32 bit address */ 
....................             addr = make32(addr_high, addr_low); 
002E0:  CLRF   0A
002E2:  MOVFF  0D,09
002E6:  MOVFF  0B,07
002EA:  MOVFF  0C,08
....................  
....................             /* get record type */ 
....................             rectype = get_hexbyte(&buffer[HEX_TYPE_START]); 
002EE:  CLRF   4D
002F0:  MOVLW  18
002F2:  MOVWF  4C
002F4:  RCALL  019A
002F6:  MOVFF  01,0F
....................              
....................             if (rectype == HEX_DATA_REC) 
002FA:  MOVF   0F,F
002FC:  BNZ   037A
....................             { 
....................                 /* only program code memory */ 
....................                 if ((addr_high < 0x30) && (addr >= RESET_VECTOR)) 
002FE:  MOVF   0D,W
00300:  SUBLW  2F
00302:  BNC   0378
00304:  MOVF   0A,F
00306:  BNZ   0312
00308:  MOVF   09,F
0030A:  BNZ   0312
0030C:  MOVF   08,W
0030E:  SUBLW  07
00310:  BC    0378
....................                 { 
....................                     for (idx=0; idx < reclen; idx++) 
00312:  CLRF   10
00314:  MOVF   0E,W
00316:  SUBWF  10,W
00318:  BC    0360
....................                     { 
....................                         buffer[idx] = get_hexbyte(&buffer[HEX_DATA_START+(idx*2)]); 
0031A:  CLRF   03
0031C:  MOVF   10,W
0031E:  ADDLW  11
00320:  MOVWF  01
00322:  MOVLW  00
00324:  ADDWFC 03,F
00326:  MOVFF  01,47
0032A:  MOVFF  03,48
0032E:  BCF    FD8.0
00330:  RLCF   10,W
00332:  ADDLW  09
00334:  CLRF   03
00336:  ADDLW  11
00338:  MOVWF  01
0033A:  MOVLW  00
0033C:  ADDWFC 03,F
0033E:  MOVFF  01,49
00342:  MOVFF  03,4A
00346:  MOVFF  03,4D
0034A:  MOVFF  01,4C
0034E:  RCALL  019A
00350:  MOVFF  48,FEA
00354:  MOVFF  47,FE9
00358:  MOVFF  01,FEF
....................                     } 
....................  
....................                     #if getenv("FLASH_ERASE_SIZE") > getenv("FLASH_WRITE_SIZE") 
0035C:  INCF   10,F
0035E:  BRA    0314
....................                     #if defined(__PCM__) 
....................                     if ((addr_low!=next_addr)&&(addr_low&(getenv("FLASH_ERASE_SIZE")-1)!=0)) 
....................                     #else 
....................                     if ((addr_low!=next_addr)&&(addr_low&(getenv("FLASH_ERASE_SIZE")/2-1)!=0)) 
....................                     #endif 
....................                         erase_program_eeprom(addr); 
....................                     next_addr = addr_low + 1; 
....................                     #endif 
....................                     write_program_memory(addr, buffer, reclen); 
00360:  MOVFF  09,FF8
00364:  MOVFF  08,FF7
00368:  MOVFF  07,FF6
0036C:  CLRF   FEA
0036E:  MOVLW  11
00370:  MOVWF  FE9
00372:  MOVFF  0E,47
00376:  RCALL  0230
....................                 } 
....................             } 
....................             else if (rectype == HEX_EOF_REC) 
00378:  BRA    0394
0037A:  DECFSZ 0F,W
0037C:  BRA    0382
....................             { 
....................                 hexend = 1; 
0037E:  BSF    44.0
....................             } 
....................             else if (rectype == HEX_EXTADDR_REC) 
00380:  BRA    0394
00382:  MOVF   0F,W
00384:  SUBLW  04
00386:  BNZ   0394
....................             { 
.................... 				//fprintf(RS232_BOOT,"Got extended address record\r\n"); 
....................                 /* to save resources, only take lower byte - this */ 
....................                 /* allows 24 bit addresses => enough for PIC18F */ 
....................                 //addr_high = make16(get_hexbyte(&buffer[HEX_DATA_START]), 
....................                 //                   get_hexbyte(&buffer[HEX_DATA_START+2])); 
....................                 addr_high = get_hexbyte(&buffer[HEX_DATA_START+2]); 
00388:  CLRF   4D
0038A:  MOVLW  1C
0038C:  MOVWF  4C
0038E:  RCALL  019A
00390:  MOVFF  01,0D
....................             } 
....................              
....................             /* send positive acknowledge */ 
....................             fputc(ACK,USB_BOOT); 
00394:  MOVLW  06
00396:  MOVWF  47
00398:  RCALL  004E
....................         } 
....................     } 
0039A:  BRA    027A
....................     
....................    //write_eeprom(0x05,0x00); 
....................     
.................... } 
0039C:  RETURN 0
....................  
....................  
.................... /* ========================================================================= */ 
.................... /* application                                                               */ 
.................... /* dummy application.                                                        */ 
.................... /* ========================================================================= */ 
.................... #ORG APPLICATION_START,APPLICATION_START+2 
.................... void application(void) 
.................... { 
....................    	//write_eeprom(0x05,0x01); 
....................    	while(1); 
*
00800:  BRA    0800
.................... } 
00802:  RETURN 0
....................  
....................  
.................... /* ========================================================================= */ 
.................... /* main                                                                      */ 
.................... /* checks if bootloader shall be invoked or if it shall start the            */ 
.................... /* application program.                                                      */ 
.................... /* ========================================================================= */ 
.................... #ORG BOOTLOADER_START 
....................  
.................... int timeout_error; 
....................  
.................... char timed_getc() { 
....................  
.................... 	int32 timeout; 
....................  
.................... 	timeout_error = FALSE; 
*
00108:  CLRF   05
.................... 	timeout = 0; 
0010A:  CLRF   0A
0010C:  CLRF   09
0010E:  CLRF   08
00110:  CLRF   07
....................  
.................... 	while(!kbhit(USB_BOOT)&&!kbhit(RS232_BOOT)&&(++timeout<300000)) { // half a second 
00112:  BTFSS  F82.4
00114:  BRA    0150
00116:  BTFSC  FA4.5
00118:  BRA    0150
0011A:  MOVLW  01
0011C:  ADDWF  07,F
0011E:  BTFSC  FD8.0
00120:  INCF   08,F
00122:  BTFSC  FD8.2
00124:  INCF   09,F
00126:  BTFSC  FD8.2
00128:  INCF   0A,F
0012A:  MOVF   0A,F
0012C:  BNZ   0150
0012E:  MOVF   09,W
00130:  SUBLW  04
00132:  BNC   0150
00134:  BNZ   0144
00136:  MOVF   08,W
00138:  SUBLW  93
0013A:  BNC   0150
0013C:  BNZ   0144
0013E:  MOVF   07,W
00140:  SUBLW  DF
00142:  BNC   0150
.................... 		delay_us(5); // this polls at 10x the 9600 baud rate 
00144:  MOVLW  05
00146:  MOVWF  00
00148:  DECFSZ 00,F
0014A:  BRA    0148
0014C:  BRA    014E
.................... 	} 
0014E:  BRA    0112
....................  
.................... 	if(kbhit(USB_BOOT)) { 
00150:  BTFSC  F82.4
00152:  BRA    015E
.................... 		timeout_error = FALSE; 
00154:  CLRF   05
.................... 		return(fgetc(USB_BOOT)); 
00156:  RCALL  00AE
00158:  MOVF   01,W
0015A:  BRA    0176
.................... 	} else if(kbhit(RS232_BOOT)) { 
0015C:  BRA    0176
0015E:  BTFSS  FA4.5
00160:  BRA    016C
.................... 		timeout_error = FALSE; 
00162:  CLRF   05
.................... 		return(fgetc(RS232_BOOT)); 
00164:  RCALL  00F2
00166:  MOVF   01,W
00168:  BRA    0176
.................... 	} else { 
0016A:  BRA    0176
.................... 		timeout_error = TRUE; 
0016C:  MOVLW  01
0016E:  MOVWF  05
.................... 		return(0); 
00170:  MOVLW  00
00172:  MOVWF  01
00174:  BRA    0176
.................... 	} 
.................... } 
00176:  RETURN 0
....................  
.................... void main() 
.................... { 
*
0039E:  CLRF   FF8
003A0:  BCF    FD0.7
003A2:  CLRF   FEA
003A4:  CLRF   FE9
003A6:  BCF    F94.5
003A8:  BSF    F8B.5
003AA:  CLRF   04
003AC:  BCF    F70.3
003AE:  MOVLW  17
003B0:  MOVWF  F75
003B2:  MOVLW  A2
003B4:  MOVWF  F72
003B6:  MOVLW  90
003B8:  MOVWF  F71
003BA:  MOVLB  1
003BC:  CLRF   x88
003BE:  MOVF   FC1,W
003C0:  ANDLW  F0
003C2:  MOVWF  FC1
003C4:  MOVLW  00
003C6:  MOVLB  F
003C8:  MOVWF  x38
003CA:  MOVWF  x3C
003CC:  MOVWF  x39
003CE:  MOVWF  x3A
003D0:  MOVWF  x3B
003D2:  CLRF   F77
003D4:  CLRF   F78
003D6:  CLRF   F79
....................     setup_adc(ADC_OFF); 
003D8:  BCF    FC2.0
....................  
.................... 	delay_us(50); 
003DA:  MOVLW  3D
003DC:  MOVWF  00
003DE:  DECFSZ 00,F
003E0:  BRA    03DE
....................  
.................... 	output_low(PIN_PHANTOM_ENABLE); 
003E2:  BCF    F95.5
003E4:  BCF    F8C.5
....................  
.................... 	fprintf(USB_BOOT,"Startup!\r\n"); 
003E6:  MOVLW  2A
003E8:  MOVWF  FF6
003EA:  MOVLW  00
003EC:  MOVWF  FF7
003EE:  MOVLB  0
003F0:  RCALL  008E
....................  
....................     char receive_char = timed_getc(); 
003F2:  RCALL  0108
003F4:  MOVFF  01,06
....................  
....................  
.................... 	if(receive_char == 0x55) { 
003F8:  MOVF   06,W
003FA:  SUBLW  55
003FC:  BNZ   041C
.................... 		fprintf(RS232_BOOT,"Entering bootloader!\r\n"); 
003FE:  MOVLW  36
00400:  MOVWF  FF6
00402:  MOVLW  00
00404:  MOVWF  FF7
00406:  RCALL  0178
.................... 		fputc(0x06,USB_BOOT); 
00408:  MOVLW  06
0040A:  MOVWF  47
0040C:  RCALL  004E
.................... 		fputc(0x55,USB_BOOT); 
0040E:  MOVLW  55
00410:  MOVWF  47
00412:  RCALL  004E
.................... 		fputc(0x03,USB_BOOT); 
00414:  MOVLW  03
00416:  MOVWF  47
00418:  RCALL  004E
....................         bootloader(); 
0041A:  RCALL  0272
....................     } 
....................  
....................     #asm 
....................     goto RESET_VECTOR 
0041C:  GOTO   0800
....................     #endasm 
.................... } 
....................  
....................  
.................... /* ========================================================================= */ 
.................... /* isr_low                                                                   */ 
.................... /* remap interrupt vector low.                                               */ 
.................... /* ========================================================================= */ 
.................... #ORG 0x08, 0x17 
.................... void isr_high(void) 
00420:  SLEEP 
.................... { 
....................     #asm 
....................     goto INTERRUPT_VECTOR_HIGH 
*
00008:  GOTO   0808
....................     #endasm 
.................... } 
0000C:  RETURN 0
....................  
....................  
.................... /* ========================================================================= */ 
.................... /* isr_high                                                                  */ 
.................... /* remap interrupt vector high.                                              */ 
.................... /* ========================================================================= */ 
.................... #ORG 0x18, 0x29 
.................... void isr_low(void) 
.................... { 
....................     #asm 
....................     goto INTERRUPT_VECTOR_LOW 
*
00018:  GOTO   0818
....................     #endasm 
.................... } 
0001C:  RETURN 0

Configuration Fuses:
   Word  1: E300   HSM NOPLLEN PRIMARY_ON FCMEN IESO
   Word  2: 1E18   PUT NOBROWNOUT BORV19 WDT_SW WDT128
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2D2 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
