CCS PCM C Compiler, Version 4.130, 13671               18-Oct-13 11:14

               Filename: C:\SOURCE\PIC\AV25-2 RS232\AV25-2 RS232.lst

               ROM used: 1493 words (73%)
                         Largest free fragment is 555
               RAM used: 34 (15%) at main() level
                         144 (65%) worst case
               Stack:    7 worst case (3 in main + 4 for interrupts)

*
0000:  NOP
0001:  MOVLW  03
0002:  MOVWF  0A
0003:  GOTO   341
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  BTFSS  0B.4
001B:  GOTO   01E
001C:  BTFSC  0B.1
001D:  GOTO   149
001E:  MOVF   22,W
001F:  MOVWF  04
0020:  MOVF   23,W
0021:  MOVWF  77
0022:  MOVF   24,W
0023:  MOVWF  78
0024:  MOVF   25,W
0025:  MOVWF  79
0026:  MOVF   26,W
0027:  MOVWF  7A
0028:  MOVF   27,W
0029:  MOVWF  0A
002A:  SWAPF  21,W
002B:  MOVWF  03
002C:  SWAPF  7F,F
002D:  SWAPF  7F,W
002E:  RETFIE
.................... #include <16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
.................... #include <AV25-2 RS232.h> 
.................... /* 
.................... NOTE - THIS IS THE AV25-2 VERSION!!! 
.................... */ 
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES MCLR                     //Master Clear pin enabled 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOPROTECT                //Code not protected from reading 
....................  
.................... #use delay(clock=20000000) 
*
002F:  MOVLW  D0
0030:  MOVWF  04
0031:  BCF    03.7
0032:  MOVF   00,W
0033:  BTFSC  03.2
0034:  GOTO   042
0035:  MOVLW  06
0036:  MOVWF  78
0037:  CLRF   77
0038:  DECFSZ 77,F
0039:  GOTO   038
003A:  DECFSZ 78,F
003B:  GOTO   037
003C:  MOVLW  7B
003D:  MOVWF  77
003E:  DECFSZ 77,F
003F:  GOTO   03E
0040:  DECFSZ 00,F
0041:  GOTO   035
0042:  RETURN
*
01B5:  MOVLW  03
01B6:  SUBWF  7D,F
01B7:  BTFSS  03.0
01B8:  GOTO   1C3
01B9:  MOVLW  7D
01BA:  MOVWF  04
01BB:  BCF    03.7
01BC:  MOVF   00,W
01BD:  BTFSC  03.2
01BE:  GOTO   1C3
01BF:  GOTO   1C1
01C0:  GOTO   1C1
01C1:  DECFSZ 00,F
01C2:  GOTO   1C0
.................... #define LED PIN_A1 
.................... #define DELAY 500 
....................  
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B2,rcv=PIN_B1,bits=8,errors) 
*
026B:  BTFSS  0C.5
026C:  GOTO   26B
026D:  MOVF   18,W
026E:  MOVWF  29
026F:  MOVF   1A,W
0270:  MOVWF  78
0271:  BTFSS  29.1
0272:  GOTO   275
0273:  BCF    18.4
0274:  BSF    18.4
.................... // DIGITAL POT (MICROCHIP MCP41010 
....................  
.................... #define SPI_ENABLE PIN_B6        
.................... #define DPOT_SCLK PIN_B5        
.................... #define DPOT_MOSI PIN_B4 
....................  
.................... #define DPOT_COMMAND 0x11 //Specific to Microchip MCP41010 
....................  
.................... #define POT_MAX 255  
.................... #define POT_MIN 0 
....................  
....................  
.................... #define VERSION_MAJOR 2 
.................... #define VERSION_MINOR 0 
....................  
....................  
.................... // VOLUME CONFIGURATION IN DECIBELS 
....................  
.................... unsigned int VOL_MUTE = 0; 
.................... unsigned int VOL_MIN = 0; 
.................... unsigned int VOL_MAX = 100; 
.................... unsigned int VOL_BIG_STEP = 10; // MUST BE A MULTIPLE OF 5 AND DIVIDE INTO 100 OR THINGS BREAK! 
.................... unsigned int VOL_SMALL_STEP = 5; 
.................... signed int command_data = 0; 
....................  
....................  
.................... // COMMANDS 
....................  
.................... #define COMMAND_START_BYTE 		0x02 // ASCII Start of Text 
.................... #define COMMAND_END_BYTE 		0x03 // ASCII End of text 
....................  
.................... #define VOL_START_BYTE 			0x76 // v 
.................... #define VOL_UP_BYTE 			0x75 // u 
.................... #define VOL_UP_BYTE_SMALL		0x74 
.................... #define VOL_DOWN_BYTE 			0x64 // d 
.................... #define VOL_DOWN_BYTE_SMALL		0x63 
.................... #define VOL_DISCRETE_START 		0x56 // V 
....................  
.................... #define MUTE_START_BYTE 		0x6D // m 
.................... #define MUTE_TOGGLE_BYTE 		0x4D // M 
.................... #define MUTE_FORCEMUTE_BYTE 	0x79 // y 
.................... #define MUTE_FORCEUNMUTE_BYTE 	0x6E // n 
....................  
.................... #define DEBUG_START_BYTE		0x44 //	D 
.................... #define DEBUG_GET_VERSION		0x56 // V 
....................  
.................... #define STATUS_BYTE 0x53 // S (sent after VOL_START_BYTE or MUTE_START_BYTE) 
....................  
.................... #define COMMAND_MAX_LENGTH 4 // INCLUDING END_BYTE 
....................  
.................... // COMMAND LIST FOR INTERNAL USE ONLY 
....................  
.................... #define COMMAND_VOL_UP			0x01 
.................... #define COMMAND_VOL_DOWN		0x02 
.................... #define COMMAND_VOL_DISCRETE	0x03 
.................... #define COMMAND_VOL_STATUS		0x04 
....................  
.................... #define COMMAND_MUTE_TOGGLE		0x05 
.................... #define COMMAND_FORCE_MUTE		0x06 
.................... #define COMMAND_FORCE_UNMUTE	0x07 
.................... #define COMMAND_MUTE_STATUS		0x08 
....................  
.................... #define COMMAND_GET_VERSION		0x09 
....................  
....................  
.................... // DEBUG VERBOSE MODE 
....................  
.................... #define DEBUG 0 
.................... #define DEBUG_IR 0 
....................  
....................  
.................... // INFRARED 
....................  
.................... #define IR_INPUT PIN_B0                // Pin IR received connected to (must be an interrupt) 
.................... #define IR_STATUS (!input(IR_INPUT))   // Invert the signal from the IR receiver 
....................  
.................... unsigned int current_volume = 0; // in dB 
.................... unsigned int current_pot_setting = 0; 
.................... signed int muted_volume = 0; 
.................... int is_muted = 0; 
.................... int startup_flag = 1; 
.................... int is_small_step = 0; 
.................... int get_IR_command(void); 
.................... int get_serial_command(void); 
....................  
.................... typedef struct { 
....................    int8 address; 
....................    int8 command; 
....................    int8 state; 
.................... } IR_struct; 
....................  
.................... IR_struct IR; 
....................  
.................... #include <DPOT.c> 
....................  
.................... void set_digital_pot (int data) { 
....................  
....................    /* Software SPI implementation */ 
....................  
....................    BYTE i;  
....................    BYTE cmd[2]; 
....................     
....................    cmd[0] = data; // Integer representation of volume to set (0-254) 
*
0043:  BSF    03.5
0044:  MOVF   4C,W
0045:  MOVWF  4E
....................    cmd[1] = DPOT_COMMAND; // Specific command byte for target chip 
0046:  MOVLW  11
0047:  MOVWF  4F
....................  
....................    output_high(SPI_ENABLE); // Should already be high 
0048:  BCF    06.6
0049:  BCF    03.5
004A:  BSF    06.6
....................    output_low(DPOT_SCLK); // Should already be low 
004B:  BSF    03.5
004C:  BCF    06.5
004D:  BCF    03.5
004E:  BCF    06.5
....................    delay_ms(1);  
004F:  MOVLW  01
0050:  BSF    03.5
0051:  MOVWF  50
0052:  BCF    03.5
0053:  CALL   02F
....................     
....................    output_low(SPI_ENABLE); // Bring low to enable 
0054:  BSF    03.5
0055:  BCF    06.6
0056:  BCF    03.5
0057:  BCF    06.6
....................    delay_ms(1); 
0058:  MOVLW  01
0059:  BSF    03.5
005A:  MOVWF  50
005B:  BCF    03.5
005C:  CALL   02F
....................     
....................    for(i=1;i<=16;++i) {  
005D:  MOVLW  01
005E:  BSF    03.5
005F:  MOVWF  4D
0060:  MOVF   4D,W
0061:  SUBLW  10
0062:  BTFSS  03.0
0063:  GOTO   07F
....................       output_bit(DPOT_MOSI, shift_left(cmd,2,0)); // Shifts out a single bit (16-bits total) 
0064:  BCF    03.0
0065:  RLF    4E,F
0066:  RLF    4F,F
0067:  BTFSC  03.0
0068:  GOTO   06D
0069:  BCF    03.5
006A:  BCF    06.4
006B:  GOTO   06F
006C:  BSF    03.5
006D:  BCF    03.5
006E:  BSF    06.4
006F:  BSF    03.5
0070:  BCF    06.4
....................  
....................       output_high(DPOT_SCLK);  
0071:  BCF    06.5
0072:  BCF    03.5
0073:  BSF    06.5
....................       delay_us(2);  
0074:  MOVLW  03
0075:  MOVWF  77
0076:  DECFSZ 77,F
0077:  GOTO   076
....................       output_low(DPOT_SCLK);  
0078:  BSF    03.5
0079:  BCF    06.5
007A:  BCF    03.5
007B:  BCF    06.5
....................    } 
007C:  BSF    03.5
007D:  INCF   4D,F
007E:  GOTO   060
....................     
....................    output_high(SPI_ENABLE);  
007F:  BCF    06.6
0080:  BCF    03.5
0081:  BSF    06.6
....................    output_low(DPOT_MOSI);  
0082:  BSF    03.5
0083:  BCF    06.4
0084:  BCF    03.5
0085:  BCF    06.4
....................    output_low(DPOT_SCLK);  
0086:  BSF    03.5
0087:  BCF    06.5
0088:  BCF    03.5
0089:  BCF    06.5
.................... } 
008A:  RETURN
....................  
.................... int volume_to_nearest_five() { 
*
0479:  CLRF   3D
.................... 	 
.................... 	int return_int = 0; 
.................... 	if(current_volume % 5 == 0) { 
047A:  MOVF   30,W
047B:  BSF    03.5
047C:  MOVWF  4C
047D:  MOVLW  05
047E:  MOVWF  4D
*
0493:  MOVF   77,F
0494:  BTFSS  03.2
0495:  GOTO   49B
.................... 		return current_volume; 
0496:  BCF    03.5
0497:  MOVF   30,W
0498:  MOVWF  78
0499:  GOTO   57D
049A:  BSF    03.5
.................... 	} 
....................  
.................... 	if(current_volume == 0) { 
049B:  BCF    03.5
049C:  MOVF   30,F
049D:  BTFSS  03.2
049E:  GOTO   4A1
.................... 		return_int = 0; 
049F:  CLRF   3D
.................... 	} else if(current_volume > 0 && current_volume <= 5) { 
04A0:  GOTO   57B
04A1:  MOVF   30,F
04A2:  BTFSC  03.2
04A3:  GOTO   4AB
04A4:  MOVF   30,W
04A5:  SUBLW  05
04A6:  BTFSS  03.0
04A7:  GOTO   4AB
.................... 		return_int = 5; 
04A8:  MOVLW  05
04A9:  MOVWF  3D
.................... 	} else if (current_volume > 5 && current_volume <= 10) { 
04AA:  GOTO   57B
04AB:  MOVF   30,W
04AC:  SUBLW  05
04AD:  BTFSC  03.0
04AE:  GOTO   4B6
04AF:  MOVF   30,W
04B0:  SUBLW  0A
04B1:  BTFSS  03.0
04B2:  GOTO   4B6
.................... 		return_int = 10; 
04B3:  MOVLW  0A
04B4:  MOVWF  3D
.................... 	} else if (current_volume > 10 && current_volume <= 15) { 
04B5:  GOTO   57B
04B6:  MOVF   30,W
04B7:  SUBLW  0A
04B8:  BTFSC  03.0
04B9:  GOTO   4C1
04BA:  MOVF   30,W
04BB:  SUBLW  0F
04BC:  BTFSS  03.0
04BD:  GOTO   4C1
.................... 		return_int = 15; 
04BE:  MOVLW  0F
04BF:  MOVWF  3D
.................... 	} else if (current_volume > 15 && current_volume <= 20) { 
04C0:  GOTO   57B
04C1:  MOVF   30,W
04C2:  SUBLW  0F
04C3:  BTFSC  03.0
04C4:  GOTO   4CC
04C5:  MOVF   30,W
04C6:  SUBLW  14
04C7:  BTFSS  03.0
04C8:  GOTO   4CC
.................... 		return_int = 20; 
04C9:  MOVLW  14
04CA:  MOVWF  3D
.................... 	} else if (current_volume > 20 && current_volume <= 25) { 
04CB:  GOTO   57B
04CC:  MOVF   30,W
04CD:  SUBLW  14
04CE:  BTFSC  03.0
04CF:  GOTO   4D7
04D0:  MOVF   30,W
04D1:  SUBLW  19
04D2:  BTFSS  03.0
04D3:  GOTO   4D7
.................... 		return_int = 25; 
04D4:  MOVLW  19
04D5:  MOVWF  3D
.................... 	} else if (current_volume > 25 && current_volume <= 30) { 
04D6:  GOTO   57B
04D7:  MOVF   30,W
04D8:  SUBLW  19
04D9:  BTFSC  03.0
04DA:  GOTO   4E2
04DB:  MOVF   30,W
04DC:  SUBLW  1E
04DD:  BTFSS  03.0
04DE:  GOTO   4E2
.................... 		return_int = 30; 
04DF:  MOVLW  1E
04E0:  MOVWF  3D
.................... 	} else if (current_volume > 30 && current_volume <= 35) { 
04E1:  GOTO   57B
04E2:  MOVF   30,W
04E3:  SUBLW  1E
04E4:  BTFSC  03.0
04E5:  GOTO   4ED
04E6:  MOVF   30,W
04E7:  SUBLW  23
04E8:  BTFSS  03.0
04E9:  GOTO   4ED
.................... 		return_int = 35; 
04EA:  MOVLW  23
04EB:  MOVWF  3D
.................... 	} else if (current_volume > 35 && current_volume <= 40) { 
04EC:  GOTO   57B
04ED:  MOVF   30,W
04EE:  SUBLW  23
04EF:  BTFSC  03.0
04F0:  GOTO   4F8
04F1:  MOVF   30,W
04F2:  SUBLW  28
04F3:  BTFSS  03.0
04F4:  GOTO   4F8
.................... 		return_int = 40; 
04F5:  MOVLW  28
04F6:  MOVWF  3D
.................... 	} else if (current_volume > 40 && current_volume <= 45) { 
04F7:  GOTO   57B
04F8:  MOVF   30,W
04F9:  SUBLW  28
04FA:  BTFSC  03.0
04FB:  GOTO   503
04FC:  MOVF   30,W
04FD:  SUBLW  2D
04FE:  BTFSS  03.0
04FF:  GOTO   503
.................... 		return_int = 45; 
0500:  MOVLW  2D
0501:  MOVWF  3D
.................... 	} else if (current_volume > 45 && current_volume <= 50) { 
0502:  GOTO   57B
0503:  MOVF   30,W
0504:  SUBLW  2D
0505:  BTFSC  03.0
0506:  GOTO   50E
0507:  MOVF   30,W
0508:  SUBLW  32
0509:  BTFSS  03.0
050A:  GOTO   50E
.................... 		return_int = 50; 
050B:  MOVLW  32
050C:  MOVWF  3D
.................... 	} else if (current_volume > 50 && current_volume <= 55) { 
050D:  GOTO   57B
050E:  MOVF   30,W
050F:  SUBLW  32
0510:  BTFSC  03.0
0511:  GOTO   519
0512:  MOVF   30,W
0513:  SUBLW  37
0514:  BTFSS  03.0
0515:  GOTO   519
.................... 		return_int = 55; 
0516:  MOVLW  37
0517:  MOVWF  3D
.................... 	} else if (current_volume > 55 && current_volume <= 60) { 
0518:  GOTO   57B
0519:  MOVF   30,W
051A:  SUBLW  37
051B:  BTFSC  03.0
051C:  GOTO   524
051D:  MOVF   30,W
051E:  SUBLW  3C
051F:  BTFSS  03.0
0520:  GOTO   524
.................... 		return_int = 60; 
0521:  MOVLW  3C
0522:  MOVWF  3D
.................... 	} else if (current_volume > 60 && current_volume <= 65) { 
0523:  GOTO   57B
0524:  MOVF   30,W
0525:  SUBLW  3C
0526:  BTFSC  03.0
0527:  GOTO   52F
0528:  MOVF   30,W
0529:  SUBLW  41
052A:  BTFSS  03.0
052B:  GOTO   52F
.................... 		return_int = 65; 
052C:  MOVLW  41
052D:  MOVWF  3D
.................... 	} else if (current_volume > 65 && current_volume <= 70) { 
052E:  GOTO   57B
052F:  MOVF   30,W
0530:  SUBLW  41
0531:  BTFSC  03.0
0532:  GOTO   53A
0533:  MOVF   30,W
0534:  SUBLW  46
0535:  BTFSS  03.0
0536:  GOTO   53A
.................... 		return_int = 70; 
0537:  MOVLW  46
0538:  MOVWF  3D
.................... 	} else if (current_volume > 70 && current_volume <= 75) { 
0539:  GOTO   57B
053A:  MOVF   30,W
053B:  SUBLW  46
053C:  BTFSC  03.0
053D:  GOTO   545
053E:  MOVF   30,W
053F:  SUBLW  4B
0540:  BTFSS  03.0
0541:  GOTO   545
.................... 		return_int = 75; 
0542:  MOVLW  4B
0543:  MOVWF  3D
.................... 	} else if (current_volume > 75 && current_volume <= 80) { 
0544:  GOTO   57B
0545:  MOVF   30,W
0546:  SUBLW  4B
0547:  BTFSC  03.0
0548:  GOTO   550
0549:  MOVF   30,W
054A:  SUBLW  50
054B:  BTFSS  03.0
054C:  GOTO   550
.................... 		return_int = 80; 
054D:  MOVLW  50
054E:  MOVWF  3D
.................... 	} else if (current_volume > 80 && current_volume <= 85) { 
054F:  GOTO   57B
0550:  MOVF   30,W
0551:  SUBLW  50
0552:  BTFSC  03.0
0553:  GOTO   55B
0554:  MOVF   30,W
0555:  SUBLW  55
0556:  BTFSS  03.0
0557:  GOTO   55B
.................... 		return_int = 85; 
0558:  MOVLW  55
0559:  MOVWF  3D
.................... 	} else if (current_volume > 85 && current_volume <= 90) { 
055A:  GOTO   57B
055B:  MOVF   30,W
055C:  SUBLW  55
055D:  BTFSC  03.0
055E:  GOTO   566
055F:  MOVF   30,W
0560:  SUBLW  5A
0561:  BTFSS  03.0
0562:  GOTO   566
.................... 		return_int = 90; 
0563:  MOVLW  5A
0564:  MOVWF  3D
.................... 	} else if (current_volume > 90 && current_volume <= 95) { 
0565:  GOTO   57B
0566:  MOVF   30,W
0567:  SUBLW  5A
0568:  BTFSC  03.0
0569:  GOTO   571
056A:  MOVF   30,W
056B:  SUBLW  5F
056C:  BTFSS  03.0
056D:  GOTO   571
.................... 		return_int = 95; 
056E:  MOVLW  5F
056F:  MOVWF  3D
.................... 	} else if (current_volume > 95 && current_volume <= 100) { 
0570:  GOTO   57B
0571:  MOVF   30,W
0572:  SUBLW  5F
0573:  BTFSC  03.0
0574:  GOTO   57B
0575:  MOVF   30,W
0576:  SUBLW  64
0577:  BTFSS  03.0
0578:  GOTO   57B
.................... 		return_int = 100; 
0579:  MOVLW  64
057A:  MOVWF  3D
.................... 	} 
....................  
.................... 	return return_int; 
057B:  MOVF   3D,W
057C:  MOVWF  78
....................  
.................... } 
....................  
.................... void saveAndSetVol() { 
*
008B:  CLRF   61
008C:  CLRF   62
008D:  CLRF   63
....................  
.................... 	unsigned int log_index = 0; 
.................... 	int eeprom_volume = 0; 
.................... 	int eeprom_mute = 0; 
....................  
.................... 	log_index = current_volume / 5; 
008E:  MOVF   30,W
008F:  BSF    03.5
0090:  MOVWF  4C
0091:  MOVLW  05
0092:  MOVWF  4D
*
00A7:  MOVF   78,W
00A8:  BCF    03.5
00A9:  MOVWF  61
.................... 	// Calculated in Excel with (255 - (255 * POWER(VOL_PERCENT, 3.3)) 
.................... 	// Actual formula is (255 - (255 * VOL_PERCENT^3.3)) 
.................... 	// !!CHANGED 7/7/11 to have 10% be about 1.5V due to the diode dropout.. 
.................... 	// New formula is (255 - (26 + 229*VOL_PERCENT^3.3)) 
.................... 	//  --> ALSO WRITTEN AS (255 - (26 + 229 * POWER(VOL_PERCENT, 3.3)) 
....................  
.................... 	// Straight log curve - unsigned int shaped_pot_values[21] = {255,255,255,254,252,250,247,243,237,229,220,208,193,176,156,133,106,75,40,0}; 
.................... 	// Fairly linear - unsigned int shaped_pot_values[21] = {255,190,179,19,159,149,139,129,119,109,102,92,82,73,62,52,42,32,22,9,0}; 
.................... 	//                                    0   5   10  15  20  25  30  35  40  45  50  55  60  65  70  75  80  85  90  95  100 
.................... 	unsigned int shaped_pot_values[21] = {255,202,198,192,186,179,173,165,156,146,137,126,116,104,93, 80, 67, 54, 40, 24, 0  }; 
00AA:  MOVLW  FF
00AB:  BSF    03.5
00AC:  MOVWF  20
00AD:  MOVLW  CA
00AE:  MOVWF  21
00AF:  MOVLW  C6
00B0:  MOVWF  22
00B1:  MOVLW  C0
00B2:  MOVWF  23
00B3:  MOVLW  BA
00B4:  MOVWF  24
00B5:  MOVLW  B3
00B6:  MOVWF  25
00B7:  MOVLW  AD
00B8:  MOVWF  26
00B9:  MOVLW  A5
00BA:  MOVWF  27
00BB:  MOVLW  9C
00BC:  MOVWF  28
00BD:  MOVLW  92
00BE:  MOVWF  29
00BF:  MOVLW  89
00C0:  MOVWF  2A
00C1:  MOVLW  7E
00C2:  MOVWF  2B
00C3:  MOVLW  74
00C4:  MOVWF  2C
00C5:  MOVLW  68
00C6:  MOVWF  2D
00C7:  MOVLW  5D
00C8:  MOVWF  2E
00C9:  MOVLW  50
00CA:  MOVWF  2F
00CB:  MOVLW  43
00CC:  MOVWF  30
00CD:  MOVLW  36
00CE:  MOVWF  31
00CF:  MOVLW  28
00D0:  MOVWF  32
00D1:  MOVLW  18
00D2:  MOVWF  33
00D3:  CLRF   34
....................  
.................... 	current_pot_setting = shaped_pot_values[log_index]; 
00D4:  MOVLW  A0
00D5:  BCF    03.5
00D6:  ADDWF  61,W
00D7:  MOVWF  04
00D8:  BCF    03.7
00D9:  MOVF   00,W
00DA:  MOVWF  31
....................  
....................     if(DEBUG) { 
.................... 		printf("Setting volume to [POT]%u : [CV]%u\n\r",current_pot_setting,current_volume); 
.................... 	} 
.................... 	 
.................... 	if(startup_flag == 1) { 
00DB:  DECFSZ 34,W
00DC:  GOTO   0F8
.................... 	// IF THIS IS STARTING UP.. VOLUME WILL FADE IN. HIGH VOLUME WILL TAKE ABOUT HALF A SECOND 
.................... 	unsigned int x = 255; 
00DD:  MOVLW  FF
00DE:  MOVWF  64
....................  
.................... 		while(x > current_pot_setting) { 
00DF:  MOVF   64,W
00E0:  SUBWF  31,W
00E1:  BTFSC  03.0
00E2:  GOTO   0F6
.................... 			 
.................... 			x -= 5; 
00E3:  MOVLW  05
00E4:  SUBWF  64,F
.................... 			if(x < current_pot_setting) { 
00E5:  MOVF   31,W
00E6:  SUBWF  64,W
00E7:  BTFSC  03.0
00E8:  GOTO   0EB
.................... 				x = current_pot_setting; 
00E9:  MOVF   31,W
00EA:  MOVWF  64
.................... 			} 
....................  
.................... 			set_digital_pot(x); // Finally set the digital pot 
00EB:  MOVF   64,W
00EC:  BSF    03.5
00ED:  MOVWF  4C
00EE:  BCF    03.5
00EF:  CALL   043
.................... 			delay_ms(10); 
00F0:  MOVLW  0A
00F1:  BSF    03.5
00F2:  MOVWF  50
00F3:  BCF    03.5
00F4:  CALL   02F
....................  
.................... 			 
.................... 		} 
00F5:  GOTO   0DF
....................  
.................... 		startup_flag = 0; 
00F6:  CLRF   34
.................... 	} else { 
00F7:  GOTO   138
....................  
.................... 		set_digital_pot(current_pot_setting); // Finally set the digital pot 
00F8:  MOVF   31,W
00F9:  BSF    03.5
00FA:  MOVWF  4C
00FB:  BCF    03.5
00FC:  CALL   043
.................... 		//set_digital_pot(current_volume); 	 
.................... 		if(is_muted == 1) { 
00FD:  DECFSZ 33,W
00FE:  GOTO   102
.................... 			eeprom_volume = muted_volume; 
00FF:  MOVF   32,W
0100:  MOVWF  62
.................... 		} else { 
0101:  GOTO   104
.................... 			eeprom_volume = current_volume; 
0102:  MOVF   30,W
0103:  MOVWF  62
.................... 		} 
....................  
.................... 		write_eeprom(10,eeprom_volume); // Save volume in EEPROM for power cycle 
0104:  MOVLW  0A
0105:  BSF    03.5
0106:  MOVWF  1B
0107:  BCF    03.5
0108:  MOVF   62,W
0109:  BSF    03.5
010A:  MOVWF  1A
010B:  BCF    1C.7
010C:  BSF    1C.2
010D:  BCF    03.5
010E:  MOVF   0B,W
010F:  MOVWF  77
0110:  BCF    0B.7
0111:  BSF    03.5
0112:  MOVLW  55
0113:  MOVWF  1D
0114:  MOVLW  AA
0115:  MOVWF  1D
0116:  BSF    1C.1
0117:  BTFSC  1C.1
0118:  GOTO   117
0119:  BCF    1C.2
011A:  MOVF   77,W
011B:  BCF    03.5
011C:  IORWF  0B,F
.................... 		eeprom_mute = is_muted; 
011D:  MOVF   33,W
011E:  MOVWF  63
.................... 		write_eeprom(12,eeprom_mute); // Save volume in EEPROM for power cycle 
011F:  MOVLW  0C
0120:  BSF    03.5
0121:  MOVWF  1B
0122:  BCF    03.5
0123:  MOVF   63,W
0124:  BSF    03.5
0125:  MOVWF  1A
0126:  BCF    1C.7
0127:  BSF    1C.2
0128:  BCF    03.5
0129:  MOVF   0B,W
012A:  MOVWF  77
012B:  BCF    0B.7
012C:  BSF    03.5
012D:  MOVLW  55
012E:  MOVWF  1D
012F:  MOVLW  AA
0130:  MOVWF  1D
0131:  BSF    1C.1
0132:  BTFSC  1C.1
0133:  GOTO   132
0134:  BCF    1C.2
0135:  MOVF   77,W
0136:  BCF    03.5
0137:  IORWF  0B,F
....................  
.................... 	} 
....................  
....................  
.................... 	putc(COMMAND_START_BYTE); 
0138:  MOVLW  02
0139:  BTFSS  0C.4
013A:  GOTO   139
013B:  MOVWF  19
.................... 	putc(VOL_START_BYTE); 
013C:  MOVLW  76
013D:  BTFSS  0C.4
013E:  GOTO   13D
013F:  MOVWF  19
.................... 	putc(current_volume); 
0140:  MOVF   30,W
0141:  BTFSS  0C.4
0142:  GOTO   141
0143:  MOVWF  19
.................... 	putc(COMMAND_END_BYTE); 
0144:  MOVLW  03
0145:  BTFSS  0C.4
0146:  GOTO   145
0147:  MOVWF  19
.................... 	 
.................... } 
0148:  RETURN
....................  
.................... void vol_discrete() { 
.................... 	 
.................... 	// ADD A CHECK HERE BUT IT IS CURRENTLY DONE IN RS232.c 
.................... 	current_volume = command_data; 
*
0477:  MOVF   2F,W
0478:  MOVWF  30
.................... 	current_volume = volume_to_nearest_five(); 
*
057D:  MOVF   78,W
057E:  MOVWF  30
057F:  CLRF   28
0580:  BTFSC  0B.7
0581:  BSF    28.7
0582:  BCF    0B.7
.................... 	saveAndSetVol(); 
0583:  CALL   08B
0584:  BTFSC  28.7
0585:  BSF    0B.7
0586:  NOP
....................  
.................... } 
....................  
.................... void vol_up() { 
.................... 	 
.................... 	if(is_muted == 1) { 
*
01E5:  DECFSZ 33,W
01E6:  GOTO   1EA
*
0402:  DECFSZ 33,W
0403:  GOTO   407
.................... 		is_muted = 0; 
*
01E7:  CLRF   33
*
0404:  CLRF   33
.................... 		current_volume = muted_volume; 
*
01E8:  MOVF   32,W
01E9:  MOVWF  30
*
0405:  MOVF   32,W
0406:  MOVWF  30
.................... 	} 
.................... 	if(is_small_step == 1) { 
*
01EA:  DECFSZ 35,W
01EB:  GOTO   1FA
*
0407:  DECFSZ 35,W
0408:  GOTO   417
.................... 		if((current_volume + VOL_SMALL_STEP) >= VOL_MAX) { 
*
01EC:  MOVF   2E,W
01ED:  ADDWF  30,W
01EE:  SUBWF  2C,W
01EF:  BTFSC  03.2
01F0:  GOTO   1F3
01F1:  BTFSC  03.0
01F2:  GOTO   1F6
*
0409:  MOVF   2E,W
040A:  ADDWF  30,W
040B:  SUBWF  2C,W
040C:  BTFSC  03.2
040D:  GOTO   410
040E:  BTFSC  03.0
040F:  GOTO   413
.................... 			current_volume = VOL_MAX; 
*
01F3:  MOVF   2C,W
01F4:  MOVWF  30
*
0410:  MOVF   2C,W
0411:  MOVWF  30
.................... 		} else { 
*
01F5:  GOTO   1F8
*
0412:  GOTO   415
.................... 			current_volume += VOL_SMALL_STEP; 
*
01F6:  MOVF   2E,W
01F7:  ADDWF  30,F
*
0413:  MOVF   2E,W
0414:  ADDWF  30,F
.................... 		} 
....................  
.................... 		is_small_step = 0; 
*
01F8:  CLRF   35
*
0415:  CLRF   35
.................... 	} else { 
*
01F9:  GOTO   206
*
0416:  GOTO   423
.................... 		if((current_volume + VOL_BIG_STEP) >= VOL_MAX) { 
*
01FA:  MOVF   2D,W
01FB:  ADDWF  30,W
01FC:  SUBWF  2C,W
01FD:  BTFSC  03.2
01FE:  GOTO   201
01FF:  BTFSC  03.0
0200:  GOTO   204
*
0417:  MOVF   2D,W
0418:  ADDWF  30,W
0419:  SUBWF  2C,W
041A:  BTFSC  03.2
041B:  GOTO   41E
041C:  BTFSC  03.0
041D:  GOTO   421
.................... 			current_volume = VOL_MAX; 
*
0201:  MOVF   2C,W
0202:  MOVWF  30
*
041E:  MOVF   2C,W
041F:  MOVWF  30
.................... 		} else { 
*
0203:  GOTO   206
*
0420:  GOTO   423
.................... 			current_volume += VOL_BIG_STEP; 
*
0204:  MOVF   2D,W
0205:  ADDWF  30,F
*
0421:  MOVF   2D,W
0422:  ADDWF  30,F
.................... 		} 
.................... 	} 
....................     
.................... 	saveAndSetVol(); 
*
0206:  CALL   08B
0207:  NOP
*
0423:  CALL   08B
0424:  NOP
.................... } 
....................  
.................... void vol_down() { 
.................... 	 
.................... 	if(is_muted == 1) { 
*
0210:  DECFSZ 33,W
0211:  GOTO   215
*
0426:  DECFSZ 33,W
0427:  GOTO   42B
.................... 		is_muted = 0; 
*
0212:  CLRF   33
*
0428:  CLRF   33
.................... 		current_volume = muted_volume; 
*
0213:  MOVF   32,W
0214:  MOVWF  30
*
0429:  MOVF   32,W
042A:  MOVWF  30
.................... 	} 
....................  
.................... 	if(is_small_step == 1) { 
*
0215:  DECFSZ 35,W
0216:  GOTO   222
*
042B:  DECFSZ 35,W
042C:  GOTO   438
.................... 		if(current_volume < VOL_SMALL_STEP) { 
*
0217:  MOVF   2E,W
0218:  SUBWF  30,W
0219:  BTFSC  03.0
021A:  GOTO   21E
*
042D:  MOVF   2E,W
042E:  SUBWF  30,W
042F:  BTFSC  03.0
0430:  GOTO   434
.................... 			current_volume = VOL_MIN; 
*
021B:  MOVF   2B,W
021C:  MOVWF  30
*
0431:  MOVF   2B,W
0432:  MOVWF  30
.................... 		} else { 
*
021D:  GOTO   220
*
0433:  GOTO   436
.................... 			current_volume -= VOL_SMALL_STEP; 
*
021E:  MOVF   2E,W
021F:  SUBWF  30,F
*
0434:  MOVF   2E,W
0435:  SUBWF  30,F
.................... 		} 
....................  
.................... 		is_small_step = 0; 
*
0220:  CLRF   35
*
0436:  CLRF   35
.................... 	} else { 
*
0221:  GOTO   22B
*
0437:  GOTO   441
.................... 		if(current_volume < VOL_BIG_STEP) { 
*
0222:  MOVF   2D,W
0223:  SUBWF  30,W
0224:  BTFSC  03.0
0225:  GOTO   229
*
0438:  MOVF   2D,W
0439:  SUBWF  30,W
043A:  BTFSC  03.0
043B:  GOTO   43F
.................... 			current_volume = VOL_MIN; 
*
0226:  MOVF   2B,W
0227:  MOVWF  30
*
043C:  MOVF   2B,W
043D:  MOVWF  30
.................... 		} else { 
*
0228:  GOTO   22B
*
043E:  GOTO   441
.................... 			current_volume -= VOL_BIG_STEP; 
*
0229:  MOVF   2D,W
022A:  SUBWF  30,F
*
043F:  MOVF   2D,W
0440:  SUBWF  30,F
.................... 		} 
.................... 	} 
....................     
.................... 	saveAndSetVol(); 
*
022B:  CALL   08B
022C:  NOP
*
0441:  CALL   08B
0442:  NOP
.................... } 
....................  
.................... void mute_forcemute() { 
.................... 	if(is_muted) { 
*
0454:  MOVF   33,F
0455:  BTFSC  03.2
0456:  GOTO   458
.................... 		//if(DEBUG) { printf("ALREADY MUTED\n\r"); } 
.................... 		return; 
0457:  GOTO   465
.................... 	} 
.................... 	if(DEBUG) { printf("Mute ON\n\r"); } 
.................... 	is_muted = 1; 
0458:  MOVLW  01
0459:  MOVWF  33
....................    	muted_volume = current_volume; 
045A:  MOVF   30,W
045B:  MOVWF  32
.................... 	current_volume = VOL_MUTE; 
045C:  MOVF   2A,W
045D:  MOVWF  30
045E:  CLRF   28
045F:  BTFSC  0B.7
0460:  BSF    28.7
0461:  BCF    0B.7
.................... 	saveAndSetVol(); 
0462:  CALL   08B
0463:  BTFSC  28.7
0464:  BSF    0B.7
0465:  NOP
.................... } 
....................  
.................... void mute_forceunmute() { 
.................... 	if(!is_muted) { 
*
0467:  MOVF   33,F
0468:  BTFSS  03.2
0469:  GOTO   46B
.................... 		//if(DEBUG) { printf("ALREADY UNMUTED\n\r"); } 
.................... 		return; 
046A:  GOTO   475
.................... 	} 
.................... 	if(DEBUG) { printf("Mute OFF\n\r"); } 
.................... 	is_muted = 0; 
046B:  CLRF   33
....................    	current_volume = muted_volume; 
046C:  MOVF   32,W
046D:  MOVWF  30
046E:  CLRF   28
046F:  BTFSC  0B.7
0470:  BSF    28.7
0471:  BCF    0B.7
.................... 	saveAndSetVol(); 
0472:  CALL   08B
0473:  BTFSC  28.7
0474:  BSF    0B.7
0475:  NOP
.................... } 
....................  
.................... void mute_toggle() { 
....................  
.................... 	if(is_muted) { 
*
0235:  MOVF   33,F
0236:  BTFSC  03.2
0237:  GOTO   23C
*
0444:  MOVF   33,F
0445:  BTFSC  03.2
0446:  GOTO   44B
.................... 		if(DEBUG) { printf("MUTE OFF\n\r"); } 
.................... 		is_muted = 0; 
*
0238:  CLRF   33
*
0447:  CLRF   33
....................    		current_volume = muted_volume; 
*
0239:  MOVF   32,W
023A:  MOVWF  30
*
0448:  MOVF   32,W
0449:  MOVWF  30
....................  	} else { 
*
023B:  GOTO   242
*
044A:  GOTO   451
.................... 		if(DEBUG) { printf("MUTE ON\n\r"); } 
.................... 		is_muted = 1; 
*
023C:  MOVLW  01
023D:  MOVWF  33
*
044B:  MOVLW  01
044C:  MOVWF  33
....................    		muted_volume = current_volume; 
*
023E:  MOVF   30,W
023F:  MOVWF  32
*
044D:  MOVF   30,W
044E:  MOVWF  32
.................... 		current_volume = VOL_MUTE; 
*
0240:  MOVF   2A,W
0241:  MOVWF  30
*
044F:  MOVF   2A,W
0450:  MOVWF  30
.................... 	} 
.................... 	  	 
.................... 	saveAndSetVol(); 
*
0242:  CALL   08B
0243:  NOP
*
0451:  CALL   08B
0452:  NOP
....................  
....................    	 
.................... } 
....................  
.................... #include <IR.c> 
.................... int get_RC5_command(void) 
.................... { 
....................     
....................    	int16 tmp,t; 
....................    	int i; 
....................    	int inp; 
....................     
....................    	disable_interrupts(INT_EXT); 
*
0149:  BCF    0B.4
.................... 	// First measure the start bit to see if we have RC-5 protocol 
....................     
....................    	set_timer1(0); // Each tick is 1.6uS 
014A:  CLRF   0F
014B:  CLRF   0E
....................    	while(IR_STATUS == 1); 
014C:  BSF    03.5
014D:  BSF    06.0
014E:  BCF    03.5
014F:  BTFSS  06.0
0150:  GOTO   14C
....................    	t=get_timer1(); 
0151:  MOVF   0F,W
0152:  MOVWF  7A
0153:  MOVF   0E,W
0154:  MOVWF  77
0155:  MOVF   0F,W
0156:  SUBWF  7A,W
0157:  BTFSS  03.2
0158:  GOTO   151
0159:  MOVF   77,W
015A:  MOVWF  5D
015B:  MOVF   7A,W
015C:  MOVWF  5E
....................     
....................    	if ((t<400) || (t>800)) { 
015D:  MOVF   5E,W
015E:  SUBLW  01
015F:  BTFSS  03.0
0160:  GOTO   167
0161:  BTFSS  03.2
0162:  GOTO   172
0163:  MOVF   5D,W
0164:  SUBLW  8F
0165:  BTFSC  03.0
0166:  GOTO   172
0167:  MOVF   5E,W
0168:  SUBLW  02
0169:  BTFSC  03.0
016A:  GOTO   176
016B:  XORLW  FF
016C:  BTFSS  03.2
016D:  GOTO   172
016E:  MOVF   5D,W
016F:  SUBLW  20
0170:  BTFSC  03.0
0171:  GOTO   176
.................... 		enable_interrupts(INT_EXT); 
0172:  BSF    0B.4
.................... 		return 0;   // Not RC-5 protocol, escape 
0173:  MOVLW  00
0174:  MOVWF  78
0175:  GOTO   24D
.................... 	} 
....................     
....................    // Get remaining bits 
....................    for (i=0;i<13;i++) 
0176:  CLRF   5F
0177:  MOVF   5F,W
0178:  SUBLW  0C
0179:  BTFSS  03.0
017A:  GOTO   1C7
....................    { 
....................       inp = IR_STATUS; // Get the high/low state on first half of the bit 
017B:  BSF    03.5
017C:  BSF    06.0
017D:  BCF    03.5
017E:  CLRF   60
017F:  BTFSS  06.0
0180:  INCF   60,F
....................       set_timer1(0); 
0181:  CLRF   0F
0182:  CLRF   0E
....................  
....................       while (IR_STATUS==inp) 
....................       { 
0183:  BSF    03.5
0184:  BSF    06.0
0185:  MOVLW  00
0186:  BCF    03.5
0187:  BTFSS  06.0
0188:  MOVLW  01
0189:  SUBWF  60,W
018A:  BTFSS  03.2
018B:  GOTO   1A8
....................          t=get_timer1(); 
018C:  MOVF   0F,W
018D:  MOVWF  7A
018E:  MOVF   0E,W
018F:  MOVWF  77
0190:  MOVF   0F,W
0191:  SUBWF  7A,W
0192:  BTFSS  03.2
0193:  GOTO   18C
0194:  MOVF   77,W
0195:  MOVWF  5D
0196:  MOVF   7A,W
0197:  MOVWF  5E
....................          if (t>800) { 
0198:  MOVF   5E,W
0199:  SUBLW  02
019A:  BTFSC  03.0
019B:  GOTO   1A7
019C:  XORLW  FF
019D:  BTFSS  03.2
019E:  GOTO   1A3
019F:  MOVF   5D,W
01A0:  SUBLW  20
01A1:  BTFSC  03.0
01A2:  GOTO   1A7
....................              
.................... 			enable_interrupts(INT_EXT); 
01A3:  BSF    0B.4
.................... 			return 0; // Not RC-5 protocol, escape 
01A4:  MOVLW  00
01A5:  MOVWF  78
01A6:  GOTO   24D
....................          } 
....................       } 
01A7:  GOTO   183
....................  
....................       tmp<<=1; // Shift over one byte 
01A8:  BCF    03.0
01A9:  RLF    5B,F
01AA:  RLF    5C,F
....................  
....................       if (inp==0) tmp++; 
01AB:  MOVF   60,F
01AC:  BTFSS  03.2
01AD:  GOTO   1B1
01AE:  INCF   5B,F
01AF:  BTFSC  03.2
01B0:  INCF   5C,F
.................... 	 
....................        
.................... 		delay_us(900); // Skip second half of bit  
01B1:  MOVLW  04
01B2:  MOVWF  61
01B3:  MOVLW  E0
01B4:  MOVWF  7D
*
01C3:  DECFSZ 61,F
01C4:  GOTO   1B3
....................    } 
01C5:  INCF   5F,F
01C6:  GOTO   177
....................     
....................    tmp = tmp & 0x7FF; // Remove toggle and start bits 
01C7:  MOVLW  07
01C8:  ANDWF  5C,F
....................  
....................    // Get 6-bit command from LSB side of transmission 
....................    IR.command = tmp & 0x3F; 
01C9:  MOVF   5B,W
01CA:  ANDLW  3F
01CB:  MOVWF  37
....................     
....................    tmp>>=6; 
01CC:  RRF    5C,F
01CD:  RRF    5B,F
01CE:  RRF    5C,F
01CF:  RRF    5B,F
01D0:  RRF    5C,F
01D1:  RRF    5B,F
01D2:  RRF    5C,F
01D3:  RRF    5B,F
01D4:  RRF    5C,F
01D5:  RRF    5B,F
01D6:  RRF    5C,F
01D7:  RRF    5B,F
01D8:  MOVLW  03
01D9:  ANDWF  5C,F
....................    // Get 5-bit address from rest of transmission 
....................    IR.address = tmp & 0xff; 
01DA:  MOVF   5B,W
01DB:  MOVWF  36
....................  
....................    // Successful reception 
....................    IR.state = 1; 
01DC:  MOVLW  01
01DD:  MOVWF  38
....................  
....................     
....................    // Return OR we can do change_vol() action here 
....................    if(DEBUG_IR) { 
.................... 		printf("IR RECEIVED - Address: %u, Command: %u\n\r",IR.address,IR.command); 
....................    } 
....................     
.................... 	if(IR.address == 0 && IR.command == 16) { 
01DE:  MOVF   36,F
01DF:  BTFSS  03.2
01E0:  GOTO   209
01E1:  MOVF   37,W
01E2:  SUBLW  10
01E3:  BTFSS  03.2
01E4:  GOTO   209
....................     	vol_up(); 
.................... 		if(DEBUG_IR) { printf("VOL UP"); } 
....................    	} else if(IR.address == 0 && IR.command == 17) { 
*
0208:  GOTO   244
0209:  MOVF   36,F
020A:  BTFSS  03.2
020B:  GOTO   22E
020C:  MOVF   37,W
020D:  SUBLW  11
020E:  BTFSS  03.2
020F:  GOTO   22E
....................       	vol_down(); 
.................... 		if(DEBUG_IR) { printf("VOL DOWN"); } 
....................    	} else if(IR.address == 0 && IR.command == 13) { 
*
022D:  GOTO   244
022E:  MOVF   36,F
022F:  BTFSS  03.2
0230:  GOTO   244
0231:  MOVF   37,W
0232:  SUBLW  0D
0233:  BTFSS  03.2
0234:  GOTO   244
....................       	mute_toggle(); 
.................... 		if(DEBUG_IR) { printf("MUTE TOGGLE"); } 
....................    	} 
.................... 	 
....................     
....................    IR.state = 0; // Clear state flag 
*
0244:  CLRF   38
....................    delay_ms(250); // similar to debounce.. 
0245:  MOVLW  FA
0246:  BSF    03.5
0247:  MOVWF  50
0248:  BCF    03.5
0249:  CALL   02F
....................    enable_interrupts(INT_EXT); // Ready to receive new command 
024A:  BSF    0B.4
....................    return 1; 
024B:  MOVLW  01
024C:  MOVWF  78
.................... } 
....................  
.................... #include <RS232.c> 
.................... int timeout_error; 
....................  
.................... char timed_getc() { 
....................  
.................... 	long timeout; 
....................  
.................... 	timeout_error = FALSE; 
*
0250:  CLRF   39
.................... 	timeout = 0; 
0251:  CLRF   45
0252:  CLRF   44
....................  
.................... 	while(!kbhit()&&(++timeout<50000)) { // half a second 
0253:  BTFSC  0C.5
0254:  GOTO   268
0255:  INCF   44,F
0256:  BTFSC  03.2
0257:  INCF   45,F
0258:  MOVF   45,W
0259:  SUBLW  C3
025A:  BTFSS  03.0
025B:  GOTO   268
025C:  BTFSS  03.2
025D:  GOTO   262
025E:  MOVF   44,W
025F:  SUBLW  4F
0260:  BTFSS  03.0
0261:  GOTO   268
.................... 		delay_us(10); // this polls at 10x the 9600 baud rate 
0262:  MOVLW  10
0263:  MOVWF  77
0264:  DECFSZ 77,F
0265:  GOTO   264
0266:  NOP
.................... 	} 
0267:  GOTO   253
....................  
.................... 	if(kbhit()) { 
0268:  BTFSS  0C.5
0269:  GOTO   278
.................... 		timeout_error = FALSE; 
026A:  CLRF   39
.................... 		return(getc()); 
*
0275:  MOVF   78,W
0276:  GOTO   27D
.................... 	} else { 
0277:  GOTO   27D
.................... 		timeout_error = TRUE; 
0278:  MOVLW  01
0279:  MOVWF  39
.................... 		return(0); 
027A:  MOVLW  00
027B:  MOVWF  78
027C:  GOTO   27D
.................... 	} 
.................... } 
027D:  RETURN
....................  
.................... int get_serial_command()  {  
027E:  CALL   250
027F:  MOVF   78,W
0280:  MOVWF  42
.................... 	int valid_command; 
.................... 	int is_error; 
.................... 	char command_char; 
.................... 	char data_char1; 
.................... 	char end_char; 
.................... 	 
.................... 	char start_char = timed_getc(); 
....................  
.................... 	if(TIMEOUT_ERROR == true) { 
0281:  DECFSZ 39,W
0282:  GOTO   286
.................... 		return 0x50; // return ERR_START_TIMEOUT; 
0283:  MOVLW  50
0284:  MOVWF  78
0285:  GOTO   340
.................... 	} 
....................  
.................... 	if(start_char != COMMAND_START_BYTE) {  
0286:  MOVF   42,W
0287:  SUBLW  02
0288:  BTFSC  03.2
0289:  GOTO   28D
.................... 		return 0; // return ERR_START_INVALID;  
028A:  MOVLW  00
028B:  MOVWF  78
028C:  GOTO   340
.................... 	} 
....................  
.................... 	 
.................... 	valid_command = 0; 
028D:  CLRF   3D
.................... 	is_error = 0; 
028E:  CLRF   3E
.................... 	 
.................... 	command_char = timed_getc(); 
028F:  CALL   250
0290:  MOVF   78,W
0291:  MOVWF  3F
....................  
.................... 	if(TIMEOUT_ERROR == true) { 
0292:  DECFSZ 39,W
0293:  GOTO   297
.................... 		return 0; // return ERR_COMMAND_TIMEOUT; 
0294:  MOVLW  00
0295:  MOVWF  78
0296:  GOTO   340
.................... 	} 
....................  
.................... 	switch(command_char) { 
0297:  MOVF   3F,W
0298:  XORLW  76
0299:  BTFSC  03.2
029A:  GOTO   2A5
029B:  XORLW  20
029C:  BTFSC  03.2
029D:  GOTO   2D7
029E:  XORLW  3B
029F:  BTFSC  03.2
02A0:  GOTO   2EE
02A1:  XORLW  29
02A2:  BTFSC  03.2
02A3:  GOTO   316
02A4:  GOTO   329
....................  
.................... 		case VOL_START_BYTE : 
....................  
.................... 			data_char1 = timed_getc(); 
02A5:  CALL   250
02A6:  MOVF   78,W
02A7:  MOVWF  40
....................  
.................... 			if(TIMEOUT_ERROR == true) { 
02A8:  DECFSZ 39,W
02A9:  GOTO   2AD
.................... 				return 0; // return ERR_DATA_TIMEOUT; 
02AA:  MOVLW  00
02AB:  MOVWF  78
02AC:  GOTO   340
.................... 			} 
.................... 	 
.................... 			if(data_char1 == VOL_UP_BYTE) { //u 
02AD:  MOVF   40,W
02AE:  SUBLW  75
02AF:  BTFSS  03.2
02B0:  GOTO   2B4
.................... 				valid_command = COMMAND_VOL_UP; 
02B1:  MOVLW  01
02B2:  MOVWF  3D
.................... 			} else if(data_char1 == VOL_DOWN_BYTE) { //d 
02B3:  GOTO   2D6
02B4:  MOVF   40,W
02B5:  SUBLW  64
02B6:  BTFSS  03.2
02B7:  GOTO   2BB
.................... 				valid_command = COMMAND_VOL_DOWN; // vol_down 
02B8:  MOVLW  02
02B9:  MOVWF  3D
.................... 			} else if(data_char1 == VOL_DOWN_BYTE_SMALL) { 
02BA:  GOTO   2D6
02BB:  MOVF   40,W
02BC:  SUBLW  63
02BD:  BTFSS  03.2
02BE:  GOTO   2C4
.................... 				is_small_step = 1; 
02BF:  MOVLW  01
02C0:  MOVWF  35
.................... 				valid_command = COMMAND_VOL_DOWN; 
02C1:  MOVLW  02
02C2:  MOVWF  3D
.................... 			} else if(data_char1 == VOL_UP_BYTE_SMALL) { 
02C3:  GOTO   2D6
02C4:  MOVF   40,W
02C5:  SUBLW  74
02C6:  BTFSS  03.2
02C7:  GOTO   2CC
.................... 				is_small_step = 1; 
02C8:  MOVLW  01
02C9:  MOVWF  35
.................... 				valid_command = COMMAND_VOL_UP; 
02CA:  MOVWF  3D
.................... 			} else if(data_char1 == STATUS_BYTE) { //S 
02CB:  GOTO   2D6
02CC:  MOVF   40,W
02CD:  SUBLW  53
02CE:  BTFSS  03.2
02CF:  GOTO   2D3
.................... 				valid_command = COMMAND_VOL_STATUS; 
02D0:  MOVLW  04
02D1:  MOVWF  3D
.................... 			} else { 
02D2:  GOTO   2D6
.................... 				return 0; // return ERR_DATA_INVALID; 
02D3:  MOVLW  00
02D4:  MOVWF  78
02D5:  GOTO   340
.................... 			} 
.................... 				 
.................... 		break; 
02D6:  GOTO   32D
....................  
.................... 		case VOL_DISCRETE_START : 
.................... 	 
.................... 			data_char1 = timed_getc(); 
02D7:  CALL   250
02D8:  MOVF   78,W
02D9:  MOVWF  40
....................  
.................... 			if(TIMEOUT_ERROR == true) { 
02DA:  DECFSZ 39,W
02DB:  GOTO   2DF
.................... 				return 0; // return ERR_DATA_TIMEOUT; 
02DC:  MOVLW  00
02DD:  MOVWF  78
02DE:  GOTO   340
.................... 			} 
....................  
.................... 			int new_volume = data_char1; 
02DF:  MOVF   40,W
02E0:  MOVWF  43
.................... 			if((new_volume < 0) || (new_volume > 100)) { 
02E1:  MOVF   43,W
02E2:  SUBLW  64
02E3:  BTFSC  03.0
02E4:  GOTO   2E9
.................... 				return 0; // return ERR_DATA_INVALID; 
02E5:  MOVLW  00
02E6:  MOVWF  78
02E7:  GOTO   340
.................... 			} else { 
02E8:  GOTO   2ED
.................... 				valid_command = COMMAND_VOL_DISCRETE; 
02E9:  MOVLW  03
02EA:  MOVWF  3D
.................... 				command_data = new_volume; 
02EB:  MOVF   43,W
02EC:  MOVWF  2F
.................... 			} 
....................  
.................... 		break; 
02ED:  GOTO   32D
....................  
.................... 		case MUTE_START_BYTE: 
....................  
.................... 			data_char1 = timed_getc(); 
02EE:  CALL   250
02EF:  MOVF   78,W
02F0:  MOVWF  40
....................  
.................... 			if(TIMEOUT_ERROR == true) { 
02F1:  DECFSZ 39,W
02F2:  GOTO   2F6
.................... 				return 0; // return ERR_DATA_TIMEOUT; 
02F3:  MOVLW  00
02F4:  MOVWF  78
02F5:  GOTO   340
.................... 			} 
....................  
.................... 			if(data_char1 == MUTE_TOGGLE_BYTE) { // M 
02F6:  MOVF   40,W
02F7:  SUBLW  4D
02F8:  BTFSS  03.2
02F9:  GOTO   2FD
.................... 				valid_command = COMMAND_MUTE_TOGGLE; // Mute toggle 
02FA:  MOVLW  05
02FB:  MOVWF  3D
.................... 			}  else if (data_char1 == MUTE_FORCEMUTE_BYTE) { 
02FC:  GOTO   315
02FD:  MOVF   40,W
02FE:  SUBLW  79
02FF:  BTFSS  03.2
0300:  GOTO   304
.................... 				valid_command = COMMAND_FORCE_MUTE; 
0301:  MOVLW  06
0302:  MOVWF  3D
.................... 			} else if (data_char1 == MUTE_FORCEUNMUTE_BYTE) { 
0303:  GOTO   315
0304:  MOVF   40,W
0305:  SUBLW  6E
0306:  BTFSS  03.2
0307:  GOTO   30B
.................... 				valid_command = COMMAND_FORCE_UNMUTE; 
0308:  MOVLW  07
0309:  MOVWF  3D
.................... 			} else if(data_char1 == STATUS_BYTE) { //S 
030A:  GOTO   315
030B:  MOVF   40,W
030C:  SUBLW  53
030D:  BTFSS  03.2
030E:  GOTO   312
.................... 				valid_command = COMMAND_MUTE_STATUS; // mute status 
030F:  MOVLW  08
0310:  MOVWF  3D
.................... 			} else { 
0311:  GOTO   315
.................... 				return 0; // return ERR_DATA_INVALID; 
0312:  MOVLW  00
0313:  MOVWF  78
0314:  GOTO   340
.................... 			} 
....................  
.................... 		break; 
0315:  GOTO   32D
....................  
.................... 		case DEBUG_START_BYTE : 
....................  
.................... 			data_char1 = timed_getc(); 
0316:  CALL   250
0317:  MOVF   78,W
0318:  MOVWF  40
....................  
.................... 			if(TIMEOUT_ERROR == true) { 
0319:  DECFSZ 39,W
031A:  GOTO   31E
.................... 				return 0; // return ERR_DATA_TIMEOUT; 
031B:  MOVLW  00
031C:  MOVWF  78
031D:  GOTO   340
.................... 			} 
....................  
.................... 			if(data_char1 == DEBUG_GET_VERSION)	{ 
031E:  MOVF   40,W
031F:  SUBLW  56
0320:  BTFSS  03.2
0321:  GOTO   325
.................... 				valid_command = COMMAND_GET_VERSION; 
0322:  MOVLW  09
0323:  MOVWF  3D
.................... 			} else { 
0324:  GOTO   328
.................... 				return 0; // return ERR_DATA_INVALID; 
0325:  MOVLW  00
0326:  MOVWF  78
0327:  GOTO   340
.................... 			} 
....................  
.................... 		break; 
0328:  GOTO   32D
....................  
.................... 		default: 
.................... 			return 0; // return ERR_COMMAND_INVALID; 
0329:  MOVLW  00
032A:  MOVWF  78
032B:  GOTO   340
.................... 		break; 
032C:  GOTO   32D
.................... 	} 
....................  
....................  
.................... 	end_char = timed_getc(); 
032D:  CALL   250
032E:  MOVF   78,W
032F:  MOVWF  41
....................  
.................... 	if(TIMEOUT_ERROR == true) { 
0330:  DECFSZ 39,W
0331:  GOTO   335
.................... 		return 0; // return ERR_END_TIMEOUT; 
0332:  MOVLW  00
0333:  MOVWF  78
0334:  GOTO   340
.................... 	} 
....................  
.................... 	if(end_char == COMMAND_END_BYTE) { 
0335:  MOVF   41,W
0336:  SUBLW  03
0337:  BTFSS  03.2
0338:  GOTO   33D
.................... 		return valid_command; 
0339:  MOVF   3D,W
033A:  MOVWF  78
033B:  GOTO   340
.................... 	} else { 
033C:  GOTO   340
.................... 		return 0; // return ERR_END_INVALID; 
033D:  MOVLW  00
033E:  MOVWF  78
033F:  GOTO   340
.................... 	} 
.................... } 
0340:  GOTO   3C0 (RETURN)
....................  
....................  
.................... // Interrupt triggers when IR_INPUT goes from HIGH to LOW 
.................... #int_EXT 
.................... void EXT_isr() { 
....................     get_RC5_command(); 
.................... } 
....................  
....................  
....................  
*
024D:  BCF    0B.1
024E:  BCF    0A.3
024F:  GOTO   01E
.................... void main()  
.................... { 
*
0341:  CLRF   04
0342:  BCF    03.7
0343:  MOVLW  1F
0344:  ANDWF  03,F
0345:  CLRF   29
0346:  MOVLW  81
0347:  BSF    03.5
0348:  MOVWF  19
0349:  MOVLW  A6
034A:  MOVWF  18
034B:  MOVLW  90
034C:  BCF    03.5
034D:  MOVWF  18
034E:  CLRF   2A
034F:  CLRF   2B
0350:  MOVLW  64
0351:  MOVWF  2C
0352:  MOVLW  0A
0353:  MOVWF  2D
0354:  MOVLW  05
0355:  MOVWF  2E
0356:  CLRF   2F
0357:  CLRF   30
0358:  CLRF   31
0359:  CLRF   32
035A:  CLRF   33
035B:  MOVLW  01
035C:  MOVWF  34
035D:  CLRF   35
035E:  MOVLW  07
035F:  MOVWF  1F
0360:  CLRF   3A
0361:  CLRF   3B
0362:  CLRF   3C
.................... 	int rs232_command = 0, eeprom_volume = 0, eeprom_mute = 0; 
....................    	 
.................... 	setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
0363:  BSF    03.5
0364:  MOVF   01,W
0365:  ANDLW  C7
0366:  IORLW  08
0367:  MOVWF  01
....................    	setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
0368:  MOVLW  B5
0369:  BCF    03.5
036A:  MOVWF  10
....................     
....................    	setup_timer_2(T2_DISABLED,0,1); 
036B:  MOVLW  00
036C:  MOVWF  78
036D:  MOVWF  12
036E:  MOVLW  00
036F:  BSF    03.5
0370:  MOVWF  12
....................    	setup_comparator(NC_NC_NC_NC); 
0371:  MOVLW  07
0372:  BCF    03.5
0373:  MOVWF  1F
0374:  BSF    03.5
0375:  MOVF   05,W
0376:  MOVWF  05
0377:  MOVLW  10
0378:  MOVWF  77
0379:  DECFSZ 77,F
037A:  GOTO   379
037B:  NOP
037C:  BCF    03.5
037D:  MOVF   1F,W
037E:  BCF    0C.6
....................    	setup_vref(FALSE); 
037F:  BSF    03.5
0380:  CLRF   1F
....................  
....................    	enable_interrupts(INT_EXT); 
0381:  BCF    03.5
0382:  BSF    0B.4
....................    	ext_int_edge(H_TO_L); 
0383:  BSF    03.5
0384:  BCF    01.6
....................    	enable_interrupts(GLOBAL); 
0385:  MOVLW  C0
0386:  BCF    03.5
0387:  IORWF  0B,F
....................  
....................    	IR.state = 0; 
0388:  CLRF   38
....................  
....................    	/** READ CONFIGURATION VALUES FROM EEPROM, RESET IF EEPROM EMPTY **/ 
....................    	eeprom_volume = read_eeprom(10); 
0389:  MOVLW  0A
038A:  BSF    03.5
038B:  MOVWF  1B
038C:  BCF    1C.7
038D:  BSF    1C.0
038E:  MOVF   1A,W
038F:  BCF    03.5
0390:  MOVWF  3B
....................    	eeprom_mute = read_eeprom(12); 
0391:  MOVLW  0C
0392:  BSF    03.5
0393:  MOVWF  1B
0394:  BCF    1C.7
0395:  BSF    1C.0
0396:  MOVF   1A,W
0397:  BCF    03.5
0398:  MOVWF  3C
....................  
....................    	if(eeprom_volume == 0xFF) { // EEPROM empty 
0399:  INCFSZ 3B,W
039A:  GOTO   39F
....................     	//CHANGEME 
.................... 		current_volume = 100; 
039B:  MOVLW  64
039C:  MOVWF  30
.................... 		is_muted = 0; 
039D:  CLRF   33
....................    	} else { 
039E:  GOTO   3A5
.................... 		current_volume = eeprom_volume; 
039F:  MOVF   3B,W
03A0:  MOVWF  30
.................... 		muted_volume = eeprom_volume; 
03A1:  MOVF   3B,W
03A2:  MOVWF  32
.................... 		is_muted = eeprom_mute; 
03A3:  MOVF   3C,W
03A4:  MOVWF  33
.................... 	} 
.................... 	 
....................     if(is_muted == 0) { 
03A5:  MOVF   33,F
03A6:  BTFSS  03.2
03A7:  GOTO   3AF
03A8:  CLRF   28
03A9:  BTFSC  0B.7
03AA:  BSF    28.7
03AB:  BCF    0B.7
....................    		saveAndSetVol(); 
03AC:  CALL   08B
03AD:  BTFSC  28.7
03AE:  BSF    0B.7
.................... 	} 
....................  
.................... 	if(DEBUG) { printf("EEPROM VOL: %d MUTE: %d\n\r",current_volume,is_muted); } 
....................  
....................    /** END EEPROM INIT **/ 
....................     
.................... 	putc(COMMAND_START_BYTE); 
03AF:  MOVLW  02
03B0:  BTFSS  0C.4
03B1:  GOTO   3B0
03B2:  MOVWF  19
.................... 	putc('O'); 
03B3:  MOVLW  4F
03B4:  BTFSS  0C.4
03B5:  GOTO   3B4
03B6:  MOVWF  19
.................... 	putc('K'); 
03B7:  MOVLW  4B
03B8:  BTFSS  0C.4
03B9:  GOTO   3B8
03BA:  MOVWF  19
.................... 	putc(COMMAND_END_BYTE); 
03BB:  MOVLW  03
03BC:  BTFSS  0C.4
03BD:  GOTO   3BC
03BE:  MOVWF  19
....................  
....................    while (true) // Infinite loop 
....................    { 
.................... 		rs232_command = get_serial_command(); 
03BF:  GOTO   27E
03C0:  MOVF   78,W
03C1:  MOVWF  3A
....................  
.................... 		if(rs232_command == 0x50) { 
03C2:  MOVF   3A,W
03C3:  SUBLW  50
03C4:  BTFSS  03.2
03C5:  GOTO   3D2
03C6:  CLRF   28
03C7:  BTFSC  0B.7
03C8:  BSF    28.7
03C9:  BCF    0B.7
.................... 			delay_ms(10); 
03CA:  MOVLW  0A
03CB:  BSF    03.5
03CC:  MOVWF  50
03CD:  BCF    03.5
03CE:  CALL   02F
03CF:  BTFSC  28.7
03D0:  BSF    0B.7
.................... 			continue; 
03D1:  GOTO   3BF
.................... 		} 
....................  
....................       	switch(rs232_command) { 
03D2:  MOVF   3A,W
03D3:  BTFSC  03.2
03D4:  GOTO   3F1
03D5:  XORLW  01
03D6:  BTFSC  03.2
03D7:  GOTO   402
03D8:  XORLW  03
03D9:  BTFSC  03.2
03DA:  GOTO   426
03DB:  XORLW  07
03DC:  BTFSC  03.2
03DD:  GOTO   444
03DE:  XORLW  03
03DF:  BTFSC  03.2
03E0:  GOTO   454
03E1:  XORLW  01
03E2:  BTFSC  03.2
03E3:  GOTO   467
03E4:  XORLW  04
03E5:  BTFSC  03.2
03E6:  GOTO   477
03E7:  XORLW  0B
03E8:  BTFSC  03.2
03E9:  GOTO   588
03EA:  XORLW  0C
03EB:  BTFSC  03.2
03EC:  GOTO   5A0
03ED:  XORLW  0D
03EE:  BTFSC  03.2
03EF:  GOTO   5B1
03F0:  GOTO   5C2
.................... 			case 0 : 
.................... 				// error; 
....................  
.................... 				putc(COMMAND_START_BYTE); 
03F1:  MOVLW  02
03F2:  BTFSS  0C.4
03F3:  GOTO   3F2
03F4:  MOVWF  19
.................... 				putc('E'); 
03F5:  MOVLW  45
03F6:  BTFSS  0C.4
03F7:  GOTO   3F6
03F8:  MOVWF  19
.................... 				putc('R'); 
03F9:  MOVLW  52
03FA:  BTFSS  0C.4
03FB:  GOTO   3FA
03FC:  MOVWF  19
.................... 				putc(COMMAND_END_BYTE); 
03FD:  MOVLW  03
03FE:  BTFSS  0C.4
03FF:  GOTO   3FE
0400:  MOVWF  19
.................... 			break; 
0401:  GOTO   5D3
....................  
.................... 			case COMMAND_VOL_UP : 
.................... 				vol_up(); 
.................... 			break; 
*
0425:  GOTO   5D3
....................  
.................... 			case COMMAND_VOL_DOWN : 
.................... 				vol_down(); 
.................... 			break; 
*
0443:  GOTO   5D3
....................  
.................... 			case COMMAND_MUTE_TOGGLE : 
.................... 				mute_toggle(); 
.................... 			break; 
*
0453:  GOTO   5D3
....................  
.................... 			case COMMAND_FORCE_MUTE : 
.................... 				mute_forcemute(); 
.................... 			break; 
*
0466:  GOTO   5D3
....................  
.................... 			case COMMAND_FORCE_UNMUTE : 
.................... 				mute_forceunmute(); 
.................... 			break; 
*
0476:  GOTO   5D3
....................  
.................... 			case COMMAND_VOL_DISCRETE : 
.................... 				vol_discrete(); 
.................... 			break; 
*
0587:  GOTO   5D3
....................  
.................... 			case COMMAND_MUTE_STATUS : 
.................... 				// Mute status 
.................... 				putc(COMMAND_START_BYTE); 
0588:  MOVLW  02
0589:  BTFSS  0C.4
058A:  GOTO   589
058B:  MOVWF  19
.................... 				putc(MUTE_START_BYTE); 
058C:  MOVLW  6D
058D:  BTFSS  0C.4
058E:  GOTO   58D
058F:  MOVWF  19
.................... 				if(is_muted == 1) { 
0590:  DECFSZ 33,W
0591:  GOTO   597
.................... 					putc(0x01); 
0592:  MOVLW  01
0593:  BTFSS  0C.4
0594:  GOTO   593
0595:  MOVWF  19
.................... 				} else { 
0596:  GOTO   59B
.................... 					putc(0x00); 
0597:  MOVLW  00
0598:  BTFSS  0C.4
0599:  GOTO   598
059A:  MOVWF  19
.................... 				} 
.................... 				putc(COMMAND_END_BYTE); 
059B:  MOVLW  03
059C:  BTFSS  0C.4
059D:  GOTO   59C
059E:  MOVWF  19
.................... 			break; 
059F:  GOTO   5D3
....................  
.................... 			case COMMAND_VOL_STATUS : 
.................... 					putc(COMMAND_START_BYTE); 
05A0:  MOVLW  02
05A1:  BTFSS  0C.4
05A2:  GOTO   5A1
05A3:  MOVWF  19
.................... 					putc(VOL_START_BYTE); 
05A4:  MOVLW  76
05A5:  BTFSS  0C.4
05A6:  GOTO   5A5
05A7:  MOVWF  19
.................... 					putc(current_volume); 
05A8:  MOVF   30,W
05A9:  BTFSS  0C.4
05AA:  GOTO   5A9
05AB:  MOVWF  19
.................... 					putc(COMMAND_END_BYTE); 
05AC:  MOVLW  03
05AD:  BTFSS  0C.4
05AE:  GOTO   5AD
05AF:  MOVWF  19
.................... 			break; 
05B0:  GOTO   5D3
....................  
.................... 			case COMMAND_GET_VERSION	: 
.................... 				putc(COMMAND_START_BYTE); 
05B1:  MOVLW  02
05B2:  BTFSS  0C.4
05B3:  GOTO   5B2
05B4:  MOVWF  19
.................... 				putc(VERSION_MAJOR); 
05B5:  MOVLW  02
05B6:  BTFSS  0C.4
05B7:  GOTO   5B6
05B8:  MOVWF  19
.................... 				putc(VERSION_MINOR); 
05B9:  MOVLW  00
05BA:  BTFSS  0C.4
05BB:  GOTO   5BA
05BC:  MOVWF  19
.................... 				putc(COMMAND_END_BYTE); 
05BD:  MOVLW  03
05BE:  BTFSS  0C.4
05BF:  GOTO   5BE
05C0:  MOVWF  19
.................... 			break; 
05C1:  GOTO   5D3
.................... 	 
.................... 			default : 
.................... 				// error 
....................  
.................... 				putc(COMMAND_START_BYTE); 
05C2:  MOVLW  02
05C3:  BTFSS  0C.4
05C4:  GOTO   5C3
05C5:  MOVWF  19
.................... 				putc('E'); 
05C6:  MOVLW  45
05C7:  BTFSS  0C.4
05C8:  GOTO   5C7
05C9:  MOVWF  19
.................... 				putc('R'); 
05CA:  MOVLW  52
05CB:  BTFSS  0C.4
05CC:  GOTO   5CB
05CD:  MOVWF  19
.................... 				putc(COMMAND_END_BYTE); 
05CE:  MOVLW  03
05CF:  BTFSS  0C.4
05D0:  GOTO   5CF
05D1:  MOVWF  19
....................  
.................... 			break; 
05D2:  GOTO   5D3
.................... 		} 
....................        
....................    }  
05D3:  GOTO   3BF
.................... } 
05D4:  GOTO   5D4

Configuration Fuses:
   Word  1: 3F0A   NOWDT NOPUT HS NOMCLR NOBROWNOUT NOLVP NOCPD NOPROTECT

   Some fuses have been forced to be compatible with the ICD debugger.
